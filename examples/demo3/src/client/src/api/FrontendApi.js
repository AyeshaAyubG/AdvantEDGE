/*
 * Copyright (c) 2020  InterDigital Communications, Inc
 *
 * Licensed under the Apache License, Version 2.0 (the \"License\");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an \"AS IS\" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * MEC Demo 3 API
 * This section describes how to use AdvantEdge mec services with a scenario demonstrating use-case 1 - 3
 *
 * OpenAPI spec version: 0.0.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.9
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.MecDemo3Api) {
      root.MecDemo3Api = {};
    }
    root.MecDemo3Api.FrontendApi = factory(root.MecDemo3Api.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';

  /**
   * Frontend service.
   * @module api/FrontendApi
   * @version 0.0.1
   */

  /**
   * Constructs a new FrontendApi. 
   * @alias module:api/FrontendApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the infoAmsLogsGet operation.
     * @callback module:api/FrontendApi~infoAmsLogsGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve ams log on a registered app instance
     * This method retrieves ams log for a mec app displaying context state transfer
     * @param {Object} numLogs Represent number of logs to retrieve
     * @param {module:api/FrontendApi~infoAmsLogsGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.infoAmsLogsGet = function(numLogs, callback) {
      var postBody = null;

      // verify the required parameter 'numLogs' is set
      if (numLogs === undefined || numLogs === null) {
        throw new Error("Missing the required parameter 'numLogs' when calling infoAmsLogsGet");
      }


      var pathParams = {
      };
      var queryParams = {
        'numLogs': numLogs,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/info/ams/logs', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the infoApplicationMecPlatformDeleteDelete operation.
     * @callback module:api/FrontendApi~infoApplicationMecPlatformDeleteDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete app instance info resources
     * This method deletes a specific app instance info on a mec platform triggering graceful termination
     * @param {module:api/FrontendApi~infoApplicationMecPlatformDeleteDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.infoApplicationMecPlatformDeleteDelete = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/info/application/delete', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the infoApplicationMecPlatformGet operation.
     * @callback module:api/FrontendApi~infoApplicationMecPlatformGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve app instance info
     * This method retrieves a specific app instance info on a mec platform to display on demo frontend
     * @param {module:api/FrontendApi~infoApplicationMecPlatformGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.infoApplicationMecPlatformGet = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/info/application', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the infoLogsGet operation.
     * @callback module:api/FrontendApi~infoLogsGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve activity log on a registered app instance
     * This method retrieves demo activity log for a registered app instance
     * @param {Object} numLogs Represent number of logs to retrieve
     * @param {module:api/FrontendApi~infoLogsGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.infoLogsGet = function(numLogs, callback) {
      var postBody = null;

      // verify the required parameter 'numLogs' is set
      if (numLogs === undefined || numLogs === null) {
        throw new Error("Missing the required parameter 'numLogs' when calling infoLogsGet");
      }


      var pathParams = {
      };
      var queryParams = {
        'numLogs': numLogs,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/info/logs', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the registerAppMecPlatformPost operation.
     * @callback module:api/FrontendApi~registerAppMecPlatformPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Register user application on platform
     * This method registers application on a mec platform sending acknowledgement, subscriptions, and services.
     * @param {module:api/FrontendApi~registerAppMecPlatformPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.registerAppMecPlatformPost = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/register/app', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the serviceAmsDeleteDeviceDelete operation.
     * @callback module:api/FrontendApi~serviceAmsDeleteDeviceDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete AMS device in the AMS service resource
     * Create a new application mobility service for the service requester & create subscription to ams.
     * @param {Object} device Delete device from AMS service resource
     * @param {module:api/FrontendApi~serviceAmsDeleteDeviceDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.serviceAmsDeleteDeviceDelete = function(device, callback) {
      var postBody = null;

      // verify the required parameter 'device' is set
      if (device === undefined || device === null) {
        throw new Error("Missing the required parameter 'device' when calling serviceAmsDeleteDeviceDelete");
      }


      var pathParams = {
        'device': device
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/service/ams/delete/{device}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the serviceAmsUpdateDevicePut operation.
     * @callback module:api/FrontendApi~serviceAmsUpdateDevicePutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the AMS resource
     * Update mobility service with device info
     * @param {Object} device Start AMS service resource to track device name
     * @param {module:api/FrontendApi~serviceAmsUpdateDevicePutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.serviceAmsUpdateDevicePut = function(device, callback) {
      var postBody = null;

      // verify the required parameter 'device' is set
      if (device === undefined || device === null) {
        throw new Error("Missing the required parameter 'device' when calling serviceAmsUpdateDevicePut");
      }


      var pathParams = {
        'device': device
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/service/ams/update/{device}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
