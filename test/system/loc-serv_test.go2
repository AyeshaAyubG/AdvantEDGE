package main

import (
	"encoding/json"
	"fmt"
	"testing"

	"context"
	"time"

	locServClient "github.com/InterDigitalInc/AdvantEDGE/go-packages/meep-loc-serv-client"
	log "github.com/InterDigitalInc/AdvantEDGE/go-packages/meep-logger"
)

var locServAppClient *locServClient.APIClient
var locServServerUrl string

func init() {

	startSystemTest()

	//create client
	locServAppClientCfg := locServClient.NewConfiguration()
	if hostUrlStr == "" {
		locServAppClientCfg.BasePath = "http://localhost/" + sandboxName + "/location/v2"
	} else {
		locServAppClientCfg.BasePath = hostUrlStr + "/" + sandboxName + "/location/v2"
	}
	locServAppClient = locServClient.NewAPIClient(locServAppClientCfg)
	if locServAppClient == nil {
		log.Error("Failed to create Location App REST API client: ", locServAppClientCfg.BasePath)
	}
	locServServerUrl = hostUrlStr + ":" + httpListenerPort

	//enable gis engine mobility, poas-in-range and netchar update
	geAutomationUpdate(true, false, true, true)

}

func initialiseTest() {
        log.Info("activating Scenario")
        activateScenario("system-test")
        time.Sleep(1000 * time.Millisecond)
        //enable gis engine mobility, poas-in-range and netchar update
        geAutomationUpdate(true, false, true, true)
        time.Sleep(1000 * time.Millisecond)
}

func clearUpTest() {
        log.Info("terminating Scenario")
	terminateScenario()
	time.Sleep(1000 * time.Millisecond)
}

func Test_4g_to_4g_same_zone(t *testing.T) {
	fmt.Println("--- ", t.Name())
	log.MeepTextLogInit(t.Name())

	initialiseTest()
	defer clearUpTest()

	testAddress := "ue1"
	var expectedAddress string
	var expectedCurrentAccessPointId string
	var expectedPreviousAccessPointId string
	var expectedUserEventType locServClient.UserEventType

	//moving to initial position
        geMoveAssetCoordinates("ue1", 7.413917, 43.733505)
        time.Sleep(2 * time.Second)

	//subscription to test
	err := locServSubscriptionUserTracking(testAddress, locServServerUrl)
	if err != nil {
		t.Fatalf("Subscription failed")
	}

	log.Info("moving asset")
	geMoveAssetCoordinates(testAddress, 7.415917, 43.733505)
	time.Sleep(2 * time.Second)

	if len(httpReqBody) == 1 {
		var body locServClient.InlineZonalPresenceNotification
		err = json.Unmarshal([]byte(httpReqBody[0]), &body)

		//expectations
		expectedAddress = testAddress
		expectedCurrentAccessPointId = "poa-4g2"
		expectedPreviousAccessPointId = "poa-4g1"
		expectedUserEventType = "Transferring"

		if body.ZonalPresenceNotification.Address != expectedAddress {
			t.Fatalf("Address of notification not as expected")
		}
		if body.ZonalPresenceNotification.CurrentAccessPointId != expectedCurrentAccessPointId {
			t.Fatalf("CurrentAccessPointId of notification not as expected")
		}
		if body.ZonalPresenceNotification.PreviousAccessPointId != expectedPreviousAccessPointId {
			t.Fatalf("PreviousAccessPointId of notification not as expected")
		}
               if *body.ZonalPresenceNotification.UserEventType != expectedUserEventType {
                        t.Fatalf("UserEventType of notification not as expected")
		}
	} else {
		t.Fatalf("Notification not received")
	}
}

func Test_4g_to_4g_diff_zone(t *testing.T) {
        fmt.Println("--- ", t.Name())
        log.MeepTextLogInit(t.Name())

	initialiseTest()
        defer clearUpTest()

        testAddress := "ue1"
        var expectedAddress string
        var expectedCurrentAccessPointId string
        var expectedUserEventType locServClient.UserEventType

        //moving to initial position
        geMoveAssetCoordinates("ue1", 7.413917, 43.733505)
        time.Sleep(2 * time.Second)

        //subscription to test
        err := locServSubscriptionUserTracking(testAddress, locServServerUrl)
        if err != nil {
                t.Fatalf("Subscription failed")
        }

        log.Info("moving asset")
        geMoveAssetCoordinates(testAddress, 7.417917, 43.733505)
        time.Sleep(2 * time.Second)

        if len(httpReqBody) == 2 {
                var body locServClient.InlineZonalPresenceNotification
                err = json.Unmarshal([]byte(httpReqBody[0]), &body)

                //expectations
                expectedAddress = testAddress
                expectedCurrentAccessPointId = "poa-4g1"
                expectedUserEventType = "Leaving"

                if body.ZonalPresenceNotification.Address != expectedAddress {
                        t.Fatalf("Address of notification not as expected")
                }
                if body.ZonalPresenceNotification.CurrentAccessPointId != expectedCurrentAccessPointId {
                        t.Fatalf("CurrentAccessPointId of notification not as expected")
                }
               if *body.ZonalPresenceNotification.UserEventType != expectedUserEventType {
                        t.Fatalf("UserEventType of notification not as expected")
                }

                err = json.Unmarshal([]byte(httpReqBody[1]), &body)

                //expectations
                expectedAddress = testAddress
                expectedCurrentAccessPointId = "poa-4g3"
                expectedUserEventType = "Entering"

                if body.ZonalPresenceNotification.Address != expectedAddress {
                        t.Fatalf("Address of notification not as expected")
                }
                if body.ZonalPresenceNotification.CurrentAccessPointId != expectedCurrentAccessPointId {
                        t.Fatalf("CurrentAccessPointId of notification not as expected")
                }
               if *body.ZonalPresenceNotification.UserEventType != expectedUserEventType {
                        t.Fatalf("UserEventType of notification not as expected")
                }

        } else {
                t.Fatalf("Notification not received")
        }
}

func Test_4g_to_5g(t *testing.T) {
        fmt.Println("--- ", t.Name())
        log.MeepTextLogInit(t.Name())

	initialiseTest()
        defer clearUpTest()

        testAddress := "ue1"
       var expectedAddress string
        var expectedCurrentAccessPointId string
       var expectedPreviousAccessPointId string
        var expectedUserEventType locServClient.UserEventType

        //moving to initial position
        geMoveAssetCoordinates("ue1", 7.413917, 43.733505)
        time.Sleep(2 * time.Second)

        //subscription to test
        err := locServSubscriptionUserTracking(testAddress, locServServerUrl)
        if err != nil {
                t.Fatalf("Subscription failed")
        }

        log.Info("moving asset")
        geMoveAssetCoordinates(testAddress, 7.411917, 43.733505)
        time.Sleep(2 * time.Second)

        if len(httpReqBody) == 1 {
                var body locServClient.InlineZonalPresenceNotification
                err = json.Unmarshal([]byte(httpReqBody[0]), &body)

                //expectations
                expectedAddress = testAddress
                expectedCurrentAccessPointId = "poa-5g1"
               expectedPreviousAccessPointId = "poa-4g1"
                expectedUserEventType = "Transferring"

                if body.ZonalPresenceNotification.Address != expectedAddress {
                        t.Fatalf("Address of notification not as expected")
                }
                if body.ZonalPresenceNotification.CurrentAccessPointId != expectedCurrentAccessPointId {
                        t.Fatalf("CurrentAccessPointId of notification not as expected")
                }
                if body.ZonalPresenceNotification.PreviousAccessPointId != expectedPreviousAccessPointId {
                        t.Fatalf("PreviousAccessPointId of notification not as expected")
                }
               if *body.ZonalPresenceNotification.UserEventType != expectedUserEventType {
                        t.Fatalf("UserEventType of notification not as expected")
                }
        } else {
                t.Fatalf("Notification not received")
        }
}

func Test_4g_to_wifi(t *testing.T) {
        fmt.Println("--- ", t.Name())
        log.MeepTextLogInit(t.Name())

	initialiseTest()
        defer clearUpTest()

        testAddress := "ue1"
       var expectedAddress string
        var expectedCurrentAccessPointId string
       var expectedPreviousAccessPointId string
        var expectedUserEventType locServClient.UserEventType

        //moving to initial position
        geMoveAssetCoordinates("ue1", 7.413917, 43.733505)
        time.Sleep(2 * time.Second)

        //subscription to test
        err := locServSubscriptionUserTracking(testAddress, locServServerUrl)
        if err != nil {
                t.Fatalf("Subscription failed")
        }

        log.Info("moving asset")
        geMoveAssetCoordinates(testAddress, 7.413917, 43.735005)
        time.Sleep(2 * time.Second)

        if len(httpReqBody) == 1 {
                var body locServClient.InlineZonalPresenceNotification
                err = json.Unmarshal([]byte(httpReqBody[0]), &body)

                //expectations
                expectedAddress = testAddress
                expectedCurrentAccessPointId = "poa-wifi1"
              expectedPreviousAccessPointId = "poa-4g1"
                expectedUserEventType = "Transferring"

                if body.ZonalPresenceNotification.Address != expectedAddress {
                        t.Fatalf("Address of notification not as expected")
                }
                if body.ZonalPresenceNotification.CurrentAccessPointId != expectedCurrentAccessPointId {
                        t.Fatalf("CurrentAccessPointId of notification not as expected")
                }
                if body.ZonalPresenceNotification.PreviousAccessPointId != expectedPreviousAccessPointId {
                        t.Fatalf("PreviousAccessPointId of notification not as expected")
                }
               if *body.ZonalPresenceNotification.UserEventType != expectedUserEventType {
                        t.Fatalf("UserEventType of notification not as expected")
                }
        } else {
                t.Fatalf("Notification not received")
        }
}

func Test_4g_to_generic(t *testing.T) {
        fmt.Println("--- ", t.Name())
        log.MeepTextLogInit(t.Name())

	initialiseTest()
        defer clearUpTest()

        testAddress := "ue1"
       var expectedAddress string
        var expectedCurrentAccessPointId string
       var expectedPreviousAccessPointId string

        var expectedUserEventType locServClient.UserEventType

        //moving to initial position
        geMoveAssetCoordinates("ue1", 7.413917, 43.733505)
        time.Sleep(2 * time.Second)

        //subscription to test
        err := locServSubscriptionUserTracking(testAddress, locServServerUrl)
        if err != nil {
                t.Fatalf("Subscription failed")
        }

        log.Info("moving asset")
        geMoveAssetCoordinates(testAddress, 7.413917, 43.732005)
        time.Sleep(2 * time.Second)

        if len(httpReqBody) == 1 {
                var body locServClient.InlineZonalPresenceNotification
                err = json.Unmarshal([]byte(httpReqBody[0]), &body)

                //expectations
                expectedAddress = testAddress
                expectedCurrentAccessPointId = "poa1"
              expectedPreviousAccessPointId = "poa-4g1"
                expectedUserEventType = "Transferring"

                if body.ZonalPresenceNotification.Address != expectedAddress {
                        t.Fatalf("Address of notification not as expected")
                }
                if body.ZonalPresenceNotification.CurrentAccessPointId != expectedCurrentAccessPointId {
                        t.Fatalf("CurrentAccessPointId of notification not as expected")
                }
                if body.ZonalPresenceNotification.PreviousAccessPointId != expectedPreviousAccessPointId {
                        t.Fatalf("PreviousAccessPointId of notification not as expected")
                }
               if *body.ZonalPresenceNotification.UserEventType != expectedUserEventType {
                        t.Fatalf("UserEventType of notification not as expected")
                }
        } else {
                t.Fatalf("Notification not received")
        }
}

func Test_4g_to_none(t *testing.T) {
        fmt.Println("--- ", t.Name())
        log.MeepTextLogInit(t.Name())

	initialiseTest()
        defer clearUpTest()

        testAddress := "ue1"
       var expectedAddress string
        var expectedCurrentAccessPointId string
        var expectedUserEventType locServClient.UserEventType

        //moving to initial position
        geMoveAssetCoordinates("ue1", 7.413917, 43.733505)
        time.Sleep(2 * time.Second)

        //subscription to test
        err := locServSubscriptionUserTracking(testAddress, locServServerUrl)
        if err != nil {
                t.Fatalf("Subscription failed")
        }

        log.Info("moving asset")
        geMoveAssetCoordinates(testAddress, 0.0, 0.0)
        time.Sleep(2 * time.Second)

        if len(httpReqBody) == 1 {
                var body locServClient.InlineZonalPresenceNotification
                err = json.Unmarshal([]byte(httpReqBody[0]), &body)

                //expectations
                expectedAddress = testAddress
                expectedCurrentAccessPointId = "poa-4g1"
                expectedUserEventType = "Leaving"

                if body.ZonalPresenceNotification.Address != expectedAddress {
                        t.Fatalf("Address of notification not as expected")
                }
                if body.ZonalPresenceNotification.CurrentAccessPointId != expectedCurrentAccessPointId {
                        t.Fatalf("CurrentAccessPointId of notification not as expected")
                }
               if *body.ZonalPresenceNotification.UserEventType != expectedUserEventType {
                        t.Fatalf("UserEventType of notification not as expected")
                }
        } else {
                t.Fatalf("Notification not received")
        }
}

func Test_5g_to_5g_same_zone(t *testing.T) {
	fmt.Println("--- ", t.Name())
	log.MeepTextLogInit(t.Name())

	initialiseTest()
	defer clearUpTest()

	testAddress := "ue1"
	var expectedAddress string
	var expectedCurrentAccessPointId string
	var expectedPreviousAccessPointId string
	var expectedUserEventType locServClient.UserEventType

	//moving to initial position
        geMoveAssetCoordinates("ue1", 7.419917, 43.733505)
        time.Sleep(2 * time.Second)

	//subscription to test
	err := locServSubscriptionUserTracking(testAddress, locServServerUrl)
	if err != nil {
		t.Fatalf("Subscription failed")
	}

	log.Info("moving asset")
	geMoveAssetCoordinates(testAddress, 7.421917, 43.733505)
	time.Sleep(2 * time.Second)

	if len(httpReqBody) == 1 {
		var body locServClient.InlineZonalPresenceNotification
		err = json.Unmarshal([]byte(httpReqBody[0]), &body)

		//expectations
		expectedAddress = testAddress
		expectedCurrentAccessPointId = "poa-5g3"
		expectedPreviousAccessPointId = "poa-5g2"
		expectedUserEventType = "Transferring"

		if body.ZonalPresenceNotification.Address != expectedAddress {
			t.Fatalf("Address of notification not as expected")
		}
		if body.ZonalPresenceNotification.CurrentAccessPointId != expectedCurrentAccessPointId {
			t.Fatalf("CurrentAccessPointId of notification not as expected")
		}
		if body.ZonalPresenceNotification.PreviousAccessPointId != expectedPreviousAccessPointId {
			t.Fatalf("PreviousAccessPointId of notification not as expected")
		}
               if *body.ZonalPresenceNotification.UserEventType != expectedUserEventType {
                        t.Fatalf("UserEventType of notification not as expected")
		}
	} else {
		t.Fatalf("Notification not received")
	}
}

func Test_5g_to_5g_diff_zone(t *testing.T) {
        fmt.Println("--- ", t.Name())
        log.MeepTextLogInit(t.Name())

	initialiseTest()
        defer clearUpTest()

        testAddress := "ue1"
        var expectedAddress string
        var expectedCurrentAccessPointId string
        var expectedUserEventType locServClient.UserEventType

        //moving to initial position
        geMoveAssetCoordinates("ue1", 7.419917, 43.733505)
        time.Sleep(2 * time.Second)

        //subscription to test
        err := locServSubscriptionUserTracking(testAddress, locServServerUrl)
        if err != nil {
                t.Fatalf("Subscription failed")
        }

        log.Info("moving asset")
        geMoveAssetCoordinates(testAddress, 7.423917, 43.733505)
        time.Sleep(2 * time.Second)

        if len(httpReqBody) == 2 {
                var body locServClient.InlineZonalPresenceNotification
                err = json.Unmarshal([]byte(httpReqBody[0]), &body)

                //expectations
                expectedAddress = testAddress
                expectedCurrentAccessPointId = "poa-5g2"
                expectedUserEventType = "Leaving"

                if body.ZonalPresenceNotification.Address != expectedAddress {
                        t.Fatalf("Address of notification not as expected")
                }
                if body.ZonalPresenceNotification.CurrentAccessPointId != expectedCurrentAccessPointId {
                        t.Fatalf("CurrentAccessPointId of notification not as expected")
                }
               if *body.ZonalPresenceNotification.UserEventType != expectedUserEventType {
                        t.Fatalf("UserEventType of notification not as expected")
                }

                err = json.Unmarshal([]byte(httpReqBody[1]), &body)

                //expectations
                expectedAddress = testAddress
                expectedCurrentAccessPointId = "poa-5g4"
                expectedUserEventType = "Entering"

                if body.ZonalPresenceNotification.Address != expectedAddress {
                        t.Fatalf("Address of notification not as expected")
                }
                if body.ZonalPresenceNotification.CurrentAccessPointId != expectedCurrentAccessPointId {
                        t.Fatalf("CurrentAccessPointId of notification not as expected")
                }
               if *body.ZonalPresenceNotification.UserEventType != expectedUserEventType {
                        t.Fatalf("UserEventType of notification not as expected")
                }

        } else {
                t.Fatalf("Notification not received")
        }
}

func Test_5g_to_4g(t *testing.T) {
        fmt.Println("--- ", t.Name())
        log.MeepTextLogInit(t.Name())

	initialiseTest()
        defer clearUpTest()

        testAddress := "ue1"
       var expectedAddress string
        var expectedCurrentAccessPointId string
       var expectedPreviousAccessPointId string
        var expectedUserEventType locServClient.UserEventType

        //moving to initial position
        geMoveAssetCoordinates("ue1", 7.419917, 43.733505)
        time.Sleep(2 * time.Second)

        //subscription to test
        err := locServSubscriptionUserTracking(testAddress, locServServerUrl)
        if err != nil {
                t.Fatalf("Subscription failed")
        }

        log.Info("moving asset")
        geMoveAssetCoordinates(testAddress, 7.417917, 43.733505)
        time.Sleep(2 * time.Second)

        if len(httpReqBody) == 1 {
                var body locServClient.InlineZonalPresenceNotification
                err = json.Unmarshal([]byte(httpReqBody[0]), &body)

                //expectations
                expectedAddress = testAddress
                expectedCurrentAccessPointId = "poa-4g3"
               expectedPreviousAccessPointId = "poa-5g2"
                expectedUserEventType = "Transferring"

                if body.ZonalPresenceNotification.Address != expectedAddress {
                        t.Fatalf("Address of notification not as expected")
                }
                if body.ZonalPresenceNotification.CurrentAccessPointId != expectedCurrentAccessPointId {
                        t.Fatalf("CurrentAccessPointId of notification not as expected")
                }
                if body.ZonalPresenceNotification.PreviousAccessPointId != expectedPreviousAccessPointId {
                        t.Fatalf("PreviousAccessPointId of notification not as expected")
                }
               if *body.ZonalPresenceNotification.UserEventType != expectedUserEventType {
                        t.Fatalf("UserEventType of notification not as expected")
                }
        } else {
                t.Fatalf("Notification not received")
        }
}

func Test_5g_to_wifi(t *testing.T) {
        fmt.Println("--- ", t.Name())
        log.MeepTextLogInit(t.Name())

	initialiseTest()
        defer clearUpTest()

        testAddress := "ue1"
       var expectedAddress string
        var expectedCurrentAccessPointId string
       var expectedPreviousAccessPointId string
        var expectedUserEventType locServClient.UserEventType

        //moving to initial position
        geMoveAssetCoordinates("ue1", 7.419917, 43.733505)
        time.Sleep(2 * time.Second)

        //subscription to test
        err := locServSubscriptionUserTracking(testAddress, locServServerUrl)
        if err != nil {
                t.Fatalf("Subscription failed")
        }

        log.Info("moving asset")
        geMoveAssetCoordinates(testAddress, 7.419917, 43.735005)
        time.Sleep(2 * time.Second)

        if len(httpReqBody) == 1 {
                var body locServClient.InlineZonalPresenceNotification
                err = json.Unmarshal([]byte(httpReqBody[0]), &body)

                //expectations
                expectedAddress = testAddress
                expectedCurrentAccessPointId = "poa-wifi2"
              expectedPreviousAccessPointId = "poa-5g2"
                expectedUserEventType = "Transferring"

                if body.ZonalPresenceNotification.Address != expectedAddress {
                        t.Fatalf("Address of notification not as expected")
                }
                if body.ZonalPresenceNotification.CurrentAccessPointId != expectedCurrentAccessPointId {
                        t.Fatalf("CurrentAccessPointId of notification not as expected")
                }
                if body.ZonalPresenceNotification.PreviousAccessPointId != expectedPreviousAccessPointId {
                        t.Fatalf("PreviousAccessPointId of notification not as expected")
                }
               if *body.ZonalPresenceNotification.UserEventType != expectedUserEventType {
                        t.Fatalf("UserEventType of notification not as expected")
                }
        } else {
                t.Fatalf("Notification not received")
        }
}

func Test_5g_to_generic(t *testing.T) {
        fmt.Println("--- ", t.Name())
        log.MeepTextLogInit(t.Name())

	initialiseTest()
        defer clearUpTest()

        testAddress := "ue1"
       var expectedAddress string
        var expectedCurrentAccessPointId string
       var expectedPreviousAccessPointId string

        var expectedUserEventType locServClient.UserEventType

        //moving to initial position
        geMoveAssetCoordinates("ue1", 7.419917, 43.733505)
        time.Sleep(2 * time.Second)

        //subscription to test
        err := locServSubscriptionUserTracking(testAddress, locServServerUrl)
        if err != nil {
                t.Fatalf("Subscription failed")
        }

        log.Info("moving asset")
        geMoveAssetCoordinates(testAddress, 7.419917, 43.732005)
        time.Sleep(2 * time.Second)

        if len(httpReqBody) == 1 {
                var body locServClient.InlineZonalPresenceNotification
                err = json.Unmarshal([]byte(httpReqBody[0]), &body)

                //expectations
                expectedAddress = testAddress
                expectedCurrentAccessPointId = "poa2"
              expectedPreviousAccessPointId = "poa-5g2"
                expectedUserEventType = "Transferring"

                if body.ZonalPresenceNotification.Address != expectedAddress {
                        t.Fatalf("Address of notification not as expected")
                }
                if body.ZonalPresenceNotification.CurrentAccessPointId != expectedCurrentAccessPointId {
                        t.Fatalf("CurrentAccessPointId of notification not as expected")
                }
                if body.ZonalPresenceNotification.PreviousAccessPointId != expectedPreviousAccessPointId {
                        t.Fatalf("PreviousAccessPointId of notification not as expected")
                }
               if *body.ZonalPresenceNotification.UserEventType != expectedUserEventType {
                        t.Fatalf("UserEventType of notification not as expected")
                }
        } else {
                t.Fatalf("Notification not received")
        }
}

func Test_5g_to_none(t *testing.T) {
        fmt.Println("--- ", t.Name())
        log.MeepTextLogInit(t.Name())

	initialiseTest()
        defer clearUpTest()

        testAddress := "ue1"
       var expectedAddress string
        var expectedCurrentAccessPointId string
        var expectedUserEventType locServClient.UserEventType

        //moving to initial position
        geMoveAssetCoordinates("ue1", 7.419917, 43.733505)
        time.Sleep(2 * time.Second)

        //subscription to test
        err := locServSubscriptionUserTracking(testAddress, locServServerUrl)
        if err != nil {
                t.Fatalf("Subscription failed")
        }

        log.Info("moving asset")
        geMoveAssetCoordinates(testAddress, 0.0, 0.0)
        time.Sleep(2 * time.Second)

        if len(httpReqBody) == 1 {
                var body locServClient.InlineZonalPresenceNotification
                err = json.Unmarshal([]byte(httpReqBody[0]), &body)

                //expectations
                expectedAddress = testAddress
                expectedCurrentAccessPointId = "poa-5g2"
                expectedUserEventType = "Leaving"

                if body.ZonalPresenceNotification.Address != expectedAddress {
                        t.Fatalf("Address of notification not as expected")
                }
                if body.ZonalPresenceNotification.CurrentAccessPointId != expectedCurrentAccessPointId {
                        t.Fatalf("CurrentAccessPointId of notification not as expected")
                }
               if *body.ZonalPresenceNotification.UserEventType != expectedUserEventType {
                        t.Fatalf("UserEventType of notification not as expected")
                }
        } else {
                t.Fatalf("Notification not received")
        }
}

func Test_wifi_to_wifi_same_zone(t *testing.T) {
	fmt.Println("--- ", t.Name())
	log.MeepTextLogInit(t.Name())

	initialiseTest()
	defer clearUpTest()

	testAddress := "ue1"
	var expectedAddress string
	var expectedCurrentAccessPointId string
	var expectedPreviousAccessPointId string
	var expectedUserEventType locServClient.UserEventType

	//moving to initial position
        geMoveAssetCoordinates("ue1", 7.425917, 43.733505)
        time.Sleep(2 * time.Second)

	//subscription to test
	err := locServSubscriptionUserTracking(testAddress, locServServerUrl)
	if err != nil {
		t.Fatalf("Subscription failed")
	}

	log.Info("moving asset")
	geMoveAssetCoordinates(testAddress, 7.427917, 43.733505)
	time.Sleep(2 * time.Second)

	if len(httpReqBody) == 1 {
		var body locServClient.InlineZonalPresenceNotification
		err = json.Unmarshal([]byte(httpReqBody[0]), &body)

		//expectations
		expectedAddress = testAddress
		expectedCurrentAccessPointId = "poa-wifi4"
		expectedPreviousAccessPointId = "poa-wifi3"
		expectedUserEventType = "Transferring"

		if body.ZonalPresenceNotification.Address != expectedAddress {
			t.Fatalf("Address of notification not as expected")
		}
		if body.ZonalPresenceNotification.CurrentAccessPointId != expectedCurrentAccessPointId {
			t.Fatalf("CurrentAccessPointId of notification not as expected")
		}
		if body.ZonalPresenceNotification.PreviousAccessPointId != expectedPreviousAccessPointId {
			t.Fatalf("PreviousAccessPointId of notification not as expected")
		}
               if *body.ZonalPresenceNotification.UserEventType != expectedUserEventType {
                        t.Fatalf("UserEventType of notification not as expected")
		}
	} else {
		t.Fatalf("Notification not received")
	}
}

func Test_wifi_to_wifi_diff_zone(t *testing.T) {
        fmt.Println("--- ", t.Name())
        log.MeepTextLogInit(t.Name())

	initialiseTest()
        defer clearUpTest()

        testAddress := "ue1"
        var expectedAddress string
        var expectedCurrentAccessPointId string
        var expectedUserEventType locServClient.UserEventType

        //moving to initial position
        geMoveAssetCoordinates("ue1", 7.425917, 43.733505)
        time.Sleep(2 * time.Second)

        //subscription to test
        err := locServSubscriptionUserTracking(testAddress, locServServerUrl)
        if err != nil {
                t.Fatalf("Subscription failed")
        }

        log.Info("moving asset")
        geMoveAssetCoordinates(testAddress, 7.429917, 43.733505)
        time.Sleep(2 * time.Second)

        if len(httpReqBody) == 2 {
                var body locServClient.InlineZonalPresenceNotification
                err = json.Unmarshal([]byte(httpReqBody[0]), &body)

                //expectations
                expectedAddress = testAddress
                expectedCurrentAccessPointId = "poa-wifi3"
                expectedUserEventType = "Leaving"

                if body.ZonalPresenceNotification.Address != expectedAddress {
                        t.Fatalf("Address of notification not as expected")
                }
                if body.ZonalPresenceNotification.CurrentAccessPointId != expectedCurrentAccessPointId {
                        t.Fatalf("CurrentAccessPointId of notification not as expected")
                }
               if *body.ZonalPresenceNotification.UserEventType != expectedUserEventType {
                        t.Fatalf("UserEventType of notification not as expected")
                }

                err = json.Unmarshal([]byte(httpReqBody[1]), &body)

                //expectations
                expectedAddress = testAddress
                expectedCurrentAccessPointId = "poa-wifi5"
                expectedUserEventType = "Entering"

                if body.ZonalPresenceNotification.Address != expectedAddress {
                        t.Fatalf("Address of notification not as expected")
                }
                if body.ZonalPresenceNotification.CurrentAccessPointId != expectedCurrentAccessPointId {
                        t.Fatalf("CurrentAccessPointId of notification not as expected")
                }
               if *body.ZonalPresenceNotification.UserEventType != expectedUserEventType {
                        t.Fatalf("UserEventType of notification not as expected")
                }

        } else {
                t.Fatalf("Notification not received")
        }
}

func Test_wifi_to_5g(t *testing.T) {
        fmt.Println("--- ", t.Name())
        log.MeepTextLogInit(t.Name())

	initialiseTest()
        defer clearUpTest()

        testAddress := "ue1"
       var expectedAddress string
        var expectedCurrentAccessPointId string
       var expectedPreviousAccessPointId string
        var expectedUserEventType locServClient.UserEventType

        //moving to initial position
        geMoveAssetCoordinates("ue1", 7.425917, 43.733505)
        time.Sleep(2 * time.Second)

        //subscription to test
        err := locServSubscriptionUserTracking(testAddress, locServServerUrl)
        if err != nil {
                t.Fatalf("Subscription failed")
        }

        log.Info("moving asset")
        geMoveAssetCoordinates(testAddress, 7.423917, 43.733505)
        time.Sleep(2 * time.Second)

        if len(httpReqBody) == 1 {
                var body locServClient.InlineZonalPresenceNotification
                err = json.Unmarshal([]byte(httpReqBody[0]), &body)

                //expectations
                expectedAddress = testAddress
                expectedCurrentAccessPointId = "poa-5g4"
               expectedPreviousAccessPointId = "poa-wifi3"
                expectedUserEventType = "Transferring"

                if body.ZonalPresenceNotification.Address != expectedAddress {
                        t.Fatalf("Address of notification not as expected")
                }
                if body.ZonalPresenceNotification.CurrentAccessPointId != expectedCurrentAccessPointId {
                        t.Fatalf("CurrentAccessPointId of notification not as expected")
                }
                if body.ZonalPresenceNotification.PreviousAccessPointId != expectedPreviousAccessPointId {
                        t.Fatalf("PreviousAccessPointId of notification not as expected")
                }
               if *body.ZonalPresenceNotification.UserEventType != expectedUserEventType {
                        t.Fatalf("UserEventType of notification not as expected")
                }
        } else {
                t.Fatalf("Notification not received")
        }
}

func Test_wifi_to_4g(t *testing.T) {
        fmt.Println("--- ", t.Name())
        log.MeepTextLogInit(t.Name())

	initialiseTest()
        defer clearUpTest()

        testAddress := "ue1"
       var expectedAddress string
        var expectedCurrentAccessPointId string
       var expectedPreviousAccessPointId string
        var expectedUserEventType locServClient.UserEventType

        //moving to initial position
        geMoveAssetCoordinates("ue1", 7.425917, 43.733505)
        time.Sleep(2 * time.Second)

        //subscription to test
        err := locServSubscriptionUserTracking(testAddress, locServServerUrl)
        if err != nil {
                t.Fatalf("Subscription failed")
        }

        log.Info("moving asset")
        geMoveAssetCoordinates(testAddress, 7.425917, 43.735005)
        time.Sleep(2 * time.Second)

        if len(httpReqBody) == 1 {
                var body locServClient.InlineZonalPresenceNotification
                err = json.Unmarshal([]byte(httpReqBody[0]), &body)

                //expectations
                expectedAddress = testAddress
                expectedCurrentAccessPointId = "poa-4g4"
              expectedPreviousAccessPointId = "poa-wifi3"
                expectedUserEventType = "Transferring"

                if body.ZonalPresenceNotification.Address != expectedAddress {
                        t.Fatalf("Address of notification not as expected")
                }
                if body.ZonalPresenceNotification.CurrentAccessPointId != expectedCurrentAccessPointId {
                        t.Fatalf("CurrentAccessPointId of notification not as expected")
                }
                if body.ZonalPresenceNotification.PreviousAccessPointId != expectedPreviousAccessPointId {
                        t.Fatalf("PreviousAccessPointId of notification not as expected")
                }
               if *body.ZonalPresenceNotification.UserEventType != expectedUserEventType {
                        t.Fatalf("UserEventType of notification not as expected")
                }
        } else {
                t.Fatalf("Notification not received")
        }
}

func Test_wifi_to_generic(t *testing.T) {
        fmt.Println("--- ", t.Name())
        log.MeepTextLogInit(t.Name())

	initialiseTest()
        defer clearUpTest()

        testAddress := "ue1"
       var expectedAddress string
        var expectedCurrentAccessPointId string
       var expectedPreviousAccessPointId string

        var expectedUserEventType locServClient.UserEventType

        //moving to initial position
        geMoveAssetCoordinates("ue1", 7.425917, 43.733505)
        time.Sleep(2 * time.Second)

        //subscription to test
        err := locServSubscriptionUserTracking(testAddress, locServServerUrl)
        if err != nil {
                t.Fatalf("Subscription failed")
        }

        log.Info("moving asset")
        geMoveAssetCoordinates(testAddress, 7.425917, 43.732005)
        time.Sleep(2 * time.Second)

        if len(httpReqBody) == 1 {
                var body locServClient.InlineZonalPresenceNotification
                err = json.Unmarshal([]byte(httpReqBody[0]), &body)

                //expectations
                expectedAddress = testAddress
                expectedCurrentAccessPointId = "poa3"
              expectedPreviousAccessPointId = "poa-wifi3"
                expectedUserEventType = "Transferring"

                if body.ZonalPresenceNotification.Address != expectedAddress {
                        t.Fatalf("Address of notification not as expected")
                }
                if body.ZonalPresenceNotification.CurrentAccessPointId != expectedCurrentAccessPointId {
                        t.Fatalf("CurrentAccessPointId of notification not as expected")
                }
                if body.ZonalPresenceNotification.PreviousAccessPointId != expectedPreviousAccessPointId {
                        t.Fatalf("PreviousAccessPointId of notification not as expected")
                }
               if *body.ZonalPresenceNotification.UserEventType != expectedUserEventType {
                        t.Fatalf("UserEventType of notification not as expected")
                }
        } else {
                t.Fatalf("Notification not received")
        }
}

func Test_wifi_to_none(t *testing.T) {
        fmt.Println("--- ", t.Name())
        log.MeepTextLogInit(t.Name())

	initialiseTest()
        defer clearUpTest()

        testAddress := "ue1"
       var expectedAddress string
        var expectedCurrentAccessPointId string
        var expectedUserEventType locServClient.UserEventType

        //moving to initial position
        geMoveAssetCoordinates("ue1", 7.425917, 43.733505)
        time.Sleep(2 * time.Second)

        //subscription to test
        err := locServSubscriptionUserTracking(testAddress, locServServerUrl)
        if err != nil {
                t.Fatalf("Subscription failed")
        }

        log.Info("moving asset")
        geMoveAssetCoordinates(testAddress, 0.0, 0.0)
        time.Sleep(2 * time.Second)

        if len(httpReqBody) == 1 {
                var body locServClient.InlineZonalPresenceNotification
                err = json.Unmarshal([]byte(httpReqBody[0]), &body)

                //expectations
                expectedAddress = testAddress
                expectedCurrentAccessPointId = "poa-wifi3"
                expectedUserEventType = "Leaving"

                if body.ZonalPresenceNotification.Address != expectedAddress {
                        t.Fatalf("Address of notification not as expected")
                }
                if body.ZonalPresenceNotification.CurrentAccessPointId != expectedCurrentAccessPointId {
                        t.Fatalf("CurrentAccessPointId of notification not as expected")
                }
               if *body.ZonalPresenceNotification.UserEventType != expectedUserEventType {
                        t.Fatalf("UserEventType of notification not as expected")
                }
        } else {
                t.Fatalf("Notification not received")
        }
}

func Test_generic_to_generic_same_zone(t *testing.T) {
	fmt.Println("--- ", t.Name())
	log.MeepTextLogInit(t.Name())

	initialiseTest()
	defer clearUpTest()

	testAddress := "ue1"
	var expectedAddress string
	var expectedCurrentAccessPointId string
	var expectedPreviousAccessPointId string
	var expectedUserEventType locServClient.UserEventType

	//moving to initial position
        geMoveAssetCoordinates("ue1", 7.431917, 43.733505)
        time.Sleep(2 * time.Second)

	//subscription to test
	err := locServSubscriptionUserTracking(testAddress, locServServerUrl)
	if err != nil {
		t.Fatalf("Subscription failed")
	}

	log.Info("moving asset")
	geMoveAssetCoordinates(testAddress, 7.433917, 43.733505)
	time.Sleep(2 * time.Second)

	if len(httpReqBody) == 1 {
		var body locServClient.InlineZonalPresenceNotification
		err = json.Unmarshal([]byte(httpReqBody[0]), &body)

		//expectations
		expectedAddress = testAddress
		expectedCurrentAccessPointId = "poa5"
		expectedPreviousAccessPointId = "poa4"
		expectedUserEventType = "Transferring"

		if body.ZonalPresenceNotification.Address != expectedAddress {
			t.Fatalf("Address of notification not as expected")
		}
		if body.ZonalPresenceNotification.CurrentAccessPointId != expectedCurrentAccessPointId {
			t.Fatalf("CurrentAccessPointId of notification not as expected")
		}
		if body.ZonalPresenceNotification.PreviousAccessPointId != expectedPreviousAccessPointId {
			t.Fatalf("PreviousAccessPointId of notification not as expected")
		}
               if *body.ZonalPresenceNotification.UserEventType != expectedUserEventType {
                        t.Fatalf("UserEventType of notification not as expected")
		}
	} else {
		t.Fatalf("Notification not received")
	}
}

func Test_generic_to_generic_diff_zone(t *testing.T) {
        fmt.Println("--- ", t.Name())
        log.MeepTextLogInit(t.Name())

	initialiseTest()
        defer clearUpTest()

        testAddress := "ue1"
        var expectedAddress string
        var expectedCurrentAccessPointId string
        var expectedUserEventType locServClient.UserEventType

        //moving to initial position
        geMoveAssetCoordinates("ue1", 7.431917, 43.733505)
        time.Sleep(2 * time.Second)

        //subscription to test
        err := locServSubscriptionUserTracking(testAddress, locServServerUrl)
        if err != nil {
                t.Fatalf("Subscription failed")
        }

        log.Info("moving asset")
        geMoveAssetCoordinates(testAddress, 7.435917, 43.733505)
        time.Sleep(2 * time.Second)

        if len(httpReqBody) == 2 {
                var body locServClient.InlineZonalPresenceNotification
                err = json.Unmarshal([]byte(httpReqBody[0]), &body)

                //expectations
                expectedAddress = testAddress
                expectedCurrentAccessPointId = "poa4"
                expectedUserEventType = "Leaving"

                if body.ZonalPresenceNotification.Address != expectedAddress {
                        t.Fatalf("Address of notification not as expected")
                }
                if body.ZonalPresenceNotification.CurrentAccessPointId != expectedCurrentAccessPointId {
                        t.Fatalf("CurrentAccessPointId of notification not as expected")
                }
               if *body.ZonalPresenceNotification.UserEventType != expectedUserEventType {
                        t.Fatalf("UserEventType of notification not as expected")
                }

                err = json.Unmarshal([]byte(httpReqBody[1]), &body)

                //expectations
                expectedAddress = testAddress
                expectedCurrentAccessPointId = "poa6"
                expectedUserEventType = "Entering"

                if body.ZonalPresenceNotification.Address != expectedAddress {
                        t.Fatalf("Address of notification not as expected")
                }
                if body.ZonalPresenceNotification.CurrentAccessPointId != expectedCurrentAccessPointId {
                        t.Fatalf("CurrentAccessPointId of notification not as expected")
                }
               if *body.ZonalPresenceNotification.UserEventType != expectedUserEventType {
                        t.Fatalf("UserEventType of notification not as expected")
                }

        } else {
                t.Fatalf("Notification not received")
        }
}

func Test_gereneric_to_wifi(t *testing.T) {
        fmt.Println("--- ", t.Name())
        log.MeepTextLogInit(t.Name())

	initialiseTest()
        defer clearUpTest()

        testAddress := "ue1"
       var expectedAddress string
        var expectedCurrentAccessPointId string
       var expectedPreviousAccessPointId string
        var expectedUserEventType locServClient.UserEventType

        //moving to initial position
        geMoveAssetCoordinates("ue1", 7.431917, 43.733505)
        time.Sleep(2 * time.Second)

        //subscription to test
        err := locServSubscriptionUserTracking(testAddress, locServServerUrl)
        if err != nil {
                t.Fatalf("Subscription failed")
        }

        log.Info("moving asset")
        geMoveAssetCoordinates(testAddress, 7.429917, 43.733505)
        time.Sleep(2 * time.Second)

        if len(httpReqBody) == 1 {
                var body locServClient.InlineZonalPresenceNotification
                err = json.Unmarshal([]byte(httpReqBody[0]), &body)

                //expectations
                expectedAddress = testAddress
                expectedCurrentAccessPointId = "poa-wifi5"
               expectedPreviousAccessPointId = "poa4"
                expectedUserEventType = "Transferring"

                if body.ZonalPresenceNotification.Address != expectedAddress {
                        t.Fatalf("Address of notification not as expected")
                }
                if body.ZonalPresenceNotification.CurrentAccessPointId != expectedCurrentAccessPointId {
                        t.Fatalf("CurrentAccessPointId of notification not as expected")
                }
                if body.ZonalPresenceNotification.PreviousAccessPointId != expectedPreviousAccessPointId {
                        t.Fatalf("PreviousAccessPointId of notification not as expected")
                }
               if *body.ZonalPresenceNotification.UserEventType != expectedUserEventType {
                        t.Fatalf("UserEventType of notification not as expected")
                }
        } else {
                t.Fatalf("Notification not received")
        }
}

func Test_generic_to_4g(t *testing.T) {
        fmt.Println("--- ", t.Name())
        log.MeepTextLogInit(t.Name())

	initialiseTest()
        defer clearUpTest()

        testAddress := "ue1"
       var expectedAddress string
        var expectedCurrentAccessPointId string
       var expectedPreviousAccessPointId string
        var expectedUserEventType locServClient.UserEventType

        //moving to initial position
        geMoveAssetCoordinates("ue1", 7.431917, 43.733505)
        time.Sleep(2 * time.Second)

        //subscription to test
        err := locServSubscriptionUserTracking(testAddress, locServServerUrl)
        if err != nil {
                t.Fatalf("Subscription failed")
        }

        log.Info("moving asset")
        geMoveAssetCoordinates(testAddress, 7.431917, 43.735005)
        time.Sleep(2 * time.Second)

        if len(httpReqBody) == 1 {
                var body locServClient.InlineZonalPresenceNotification
                err = json.Unmarshal([]byte(httpReqBody[0]), &body)

                //expectations
                expectedAddress = testAddress
                expectedCurrentAccessPointId = "poa-4g5"
              expectedPreviousAccessPointId = "poa4"
                expectedUserEventType = "Transferring"

                if body.ZonalPresenceNotification.Address != expectedAddress {
                        t.Fatalf("Address of notification not as expected")
                }
                if body.ZonalPresenceNotification.CurrentAccessPointId != expectedCurrentAccessPointId {
                        t.Fatalf("CurrentAccessPointId of notification not as expected")
                }
                if body.ZonalPresenceNotification.PreviousAccessPointId != expectedPreviousAccessPointId {
                        t.Fatalf("PreviousAccessPointId of notification not as expected")
                }
               if *body.ZonalPresenceNotification.UserEventType != expectedUserEventType {
                        t.Fatalf("UserEventType of notification not as expected")
                }
        } else {
                t.Fatalf("Notification not received")
        }
}

func Test_generic_to_5g(t *testing.T) {
        fmt.Println("--- ", t.Name())
        log.MeepTextLogInit(t.Name())

	initialiseTest()
        defer clearUpTest()

        testAddress := "ue1"
       var expectedAddress string
        var expectedCurrentAccessPointId string
       var expectedPreviousAccessPointId string

        var expectedUserEventType locServClient.UserEventType

        //moving to initial position
        geMoveAssetCoordinates("ue1", 7.431917, 43.733505)
        time.Sleep(2 * time.Second)

        //subscription to test
        err := locServSubscriptionUserTracking(testAddress, locServServerUrl)
        if err != nil {
                t.Fatalf("Subscription failed")
        }

        log.Info("moving asset")
        geMoveAssetCoordinates(testAddress, 7.431917, 43.732005)
        time.Sleep(2 * time.Second)

        if len(httpReqBody) == 1 {
                var body locServClient.InlineZonalPresenceNotification
                err = json.Unmarshal([]byte(httpReqBody[0]), &body)

                //expectations
                expectedAddress = testAddress
                expectedCurrentAccessPointId = "poa-5g5"
              expectedPreviousAccessPointId = "poa4"
                expectedUserEventType = "Transferring"

                if body.ZonalPresenceNotification.Address != expectedAddress {
                        t.Fatalf("Address of notification not as expected")
                }
                if body.ZonalPresenceNotification.CurrentAccessPointId != expectedCurrentAccessPointId {
                        t.Fatalf("CurrentAccessPointId of notification not as expected")
                }
                if body.ZonalPresenceNotification.PreviousAccessPointId != expectedPreviousAccessPointId {
                        t.Fatalf("PreviousAccessPointId of notification not as expected")
                }
               if *body.ZonalPresenceNotification.UserEventType != expectedUserEventType {
                        t.Fatalf("UserEventType of notification not as expected")
                }
        } else {
                t.Fatalf("Notification not received")
        }
}

func Test_generic_to_none(t *testing.T) {
        fmt.Println("--- ", t.Name())
        log.MeepTextLogInit(t.Name())

	initialiseTest()
        defer clearUpTest()

        testAddress := "ue1"
       var expectedAddress string
        var expectedCurrentAccessPointId string
        var expectedUserEventType locServClient.UserEventType

        //moving to initial position
        geMoveAssetCoordinates("ue1", 7.431917, 43.733505)
        time.Sleep(2 * time.Second)

        //subscription to test
        err := locServSubscriptionUserTracking(testAddress, locServServerUrl)
        if err != nil {
                t.Fatalf("Subscription failed")
        }

        log.Info("moving asset")
        geMoveAssetCoordinates(testAddress, 0.0, 0.0)
        time.Sleep(2 * time.Second)

        if len(httpReqBody) == 1 {
                var body locServClient.InlineZonalPresenceNotification
                err = json.Unmarshal([]byte(httpReqBody[0]), &body)

                //expectations
                expectedAddress = testAddress
                expectedCurrentAccessPointId = "poa4"
                expectedUserEventType = "Leaving"

                if body.ZonalPresenceNotification.Address != expectedAddress {
                        t.Fatalf("Address of notification not as expected")
                }
                if body.ZonalPresenceNotification.CurrentAccessPointId != expectedCurrentAccessPointId {
                        t.Fatalf("CurrentAccessPointId of notification not as expected")
                }
               if *body.ZonalPresenceNotification.UserEventType != expectedUserEventType {
                        t.Fatalf("UserEventType of notification not as expected")
                }
        } else {
                t.Fatalf("Notification not received")
        }
}
func Test_none_to_none(t *testing.T) {
	fmt.Println("--- ", t.Name())
	log.MeepTextLogInit(t.Name())

	initialiseTest()
	defer clearUpTest()

	testAddress := "ue1"

	//moving to initial position
        geMoveAssetCoordinates("ue1", 0.0, 0.0)
        time.Sleep(2 * time.Second)

	//subscription to test
	err := locServSubscriptionUserTracking(testAddress, locServServerUrl)
	if err != nil {
		t.Fatalf("Subscription failed")
	}

	log.Info("moving asset")
	geMoveAssetCoordinates(testAddress, 1.0, 1.0)
	time.Sleep(2 * time.Second)

	if len(httpReqBody) >= 1 {
		t.Fatalf("Notification received")
	}
}

func locServSubscriptionUserTracking(address string, callbackReference string) error {

	userTrackingSubscription := locServClient.UserTrackingSubscription{address, &locServClient.CallbackReference{"", nil, callbackReference}, "", "", nil}
	inlineUserTrackingSubscription := locServClient.InlineUserTrackingSubscription{&userTrackingSubscription}

	_, _, err := locServAppClient.LocationApi.UserTrackingSubPOST(context.TODO(), inlineUserTrackingSubscription)
	if err != nil {
		log.Error("Failed to send subscription: ", err)
		return err
	}

	return nil
}

func locServSubscriptionZonalTraffic(zoneId string, callbackReference string) error {

        zonalTrafficSubscription := locServClient.ZonalTrafficSubscription{&locServClient.CallbackReference{"", nil, callbackReference}, "", 0, nil, "", nil, zoneId}
        inlineZonalTrafficSubscription := locServClient.InlineZonalTrafficSubscription{&zonalTrafficSubscription}

        _, _, err := locServAppClient.LocationApi.ZonalTrafficSubPOST(context.TODO(), inlineZonalTrafficSubscription)
        if err != nil {
                log.Error("Failed to send subscription: ", err)
                return err
        }

        return nil
}

func locServSubscriptionZoneStatus(zoneId string, callbackReference string, nbApThreshold int32, nbZoneThreshold int32) error {

        zoneStatusSubscription := locServClient.ZoneStatusSubscription{&locServClient.CallbackReference{"", nil, callbackReference}, "", nbApThreshold, nbZoneThreshold, nil, "", zoneId}
        inlineZoneStatusSubscription := locServClient.InlineZoneStatusSubscription{&zoneStatusSubscription}

        _, _, err := locServAppClient.LocationApi.ZoneStatusSubPOST(context.TODO(), inlineZoneStatusSubscription)
        if err != nil {
                log.Error("Failed to send subscription: ", err)
                return err
        }

        return nil
}

