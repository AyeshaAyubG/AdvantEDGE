---
swagger: "2.0"
info:
  description: "This API allows to control geo-spatial behavior and simulation. <p>**Micro-service**<br>[meep-gis-engine](https://github.com/InterDigitalInc/AdvantEDGE/tree/master/go-apps/meep-gis-engine)\
    \ <p>**Type & Usage**<br>Platform runtime interface to control geo-spatial behavior\
    \ and simulation <p>**Details**<br>API details available at _your-AdvantEDGE-ip-address/api_"
  version: "1.0.0"
  title: "AdvantEDGE GIS Engine REST API"
  contact:
    name: "InterDigital AdvantEDGE Support"
    email: "AdvantEDGE@InterDigital.com"
  license:
    name: "Apache 2.0"
    url: "https://github.com/InterDigitalInc/AdvantEDGE/blob/master/LICENSE"
basePath: "/sandboxname/gis/v1"
tags:
- name: "Automation"
- name: "Geospatial Data"
consumes:
- "application/json"
produces:
- "application/json"
paths:
  /automation:
    get:
      tags:
      - "Automation"
      summary: "Get automation state"
      description: "Get automation state for all automation types"
      operationId: "getAutomationState"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/AutomationStateList"
  /automation/{type}:
    get:
      tags:
      - "Automation"
      summary: "Get automation state"
      description: "Get automation state for the given automation type"
      operationId: "getAutomationStateByName"
      produces:
      - "application/json"
      parameters:
      - name: "type"
        in: "path"
        description: "Automation type.<br> Automation loop evaluates enabled automation\
          \ types once every second.<br>\n<p>Supported Types: <li>MOVEMENT - Advances\
          \ UEs along configured paths using previous position & velocity as inputs.\
          \ <li>MOBILITY - Sends Mobility events to Sanbox Controller when UE changes\
          \ POA. <li>POAS-IN-RANGE - Sends POAS-IN-RANGE events to Sanbox Controller\
          \ when list of POAs in range changes. <li>NETWORK-CHARACTERISTICS-UPDATE\
          \ - Sends network characteristics update events to Sanbox Controller when\
          \ throughput values change."
        required: true
        type: "string"
        enum:
        - "MOBILITY"
        - "MOVEMENT"
        - "POAS-IN-RANGE"
        - "NETWORK-CHARACTERISTICS-UPDATE"
        x-exportParamName: "Type_"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/AutomationState"
        500:
          description: "Internal server error"
    post:
      tags:
      - "Automation"
      summary: "Set automation state"
      description: "Set automation state for the given automation type \\"
      operationId: "setAutomationStateByName"
      produces:
      - "application/json"
      parameters:
      - name: "type"
        in: "path"
        description: "Automation type.<br> Automation loop evaluates enabled automation\
          \ types once every second.<br>\n<p>Supported Types: <li>MOBILITY - Sends\
          \ Mobility events to Sanbox Controller when UE changes POA. <li>MOVEMENT\
          \ - Advances UEs along configured paths using previous position & velocity\
          \ as inputs. <li>POAS-IN-RANGE - Sends POAS-IN-RANGE events to Sanbox Controller\
          \ when list of POAs in range changes. <li>NETWORK-CHARACTERISTICS-UPDATE\
          \ - Sends network characteristics update events to Sanbox Controller when\
          \ throughput values change."
        required: true
        type: "string"
        enum:
        - "MOBILITY"
        - "MOVEMENT"
        - "POAS-IN-RANGE"
        - "NETWORK-CHARACTERISTICS-UPDATE"
        x-exportParamName: "Type_"
      - name: "run"
        in: "query"
        description: "Automation state (e.g. true=running, false=stopped)"
        required: true
        type: "boolean"
        x-exportParamName: "Run"
      responses:
        200:
          description: "OK"
        500:
          description: "Internal server error"
  /geodata:
    get:
      tags:
      - "Geospatial Data"
      summary: "Get geospatial data"
      description: "Get geospatial data for all assets present in database"
      operationId: "getAssetData"
      produces:
      - "application/json"
      parameters:
      - name: "assetType"
        in: "query"
        description: "Filter by asset type"
        required: false
        type: "string"
        enum:
        - "UE"
        - "POA"
        - "COMPUTE"
        x-exportParamName: "AssetType"
        x-optionalDataType: "String"
      - name: "subType"
        in: "query"
        description: "Filter by asset sub type"
        required: false
        type: "string"
        enum:
        - "UE"
        - "POA"
        - "POA-4G"
        - "POA-5G"
        - "POA-WIFI"
        - "EDGE"
        - "FOG"
        - "CLOUD"
        x-exportParamName: "SubType"
        x-optionalDataType: "String"
      - name: "excludePath"
        in: "query"
        description: "Exclude UE paths in response (default: false)"
        required: false
        type: "string"
        enum:
        - "true"
        - "false"
        x-exportParamName: "ExcludePath"
        x-optionalDataType: "String"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/GeoDataAssetList"
        500:
          description: "Internal server error"
  /geodata/{assetName}:
    get:
      tags:
      - "Geospatial Data"
      summary: "Get geospatial data"
      description: "Get geospatial data for the given asset"
      operationId: "getGeoDataByName"
      produces:
      - "application/json"
      parameters:
      - name: "assetName"
        in: "path"
        description: "Name of geospatial asset"
        required: true
        type: "string"
        x-exportParamName: "AssetName"
      - name: "excludePath"
        in: "query"
        description: "Exclude UE paths in response (default: false)"
        required: false
        type: "string"
        enum:
        - "true"
        - "false"
        x-exportParamName: "ExcludePath"
        x-optionalDataType: "String"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/GeoDataAsset"
        404:
          description: "Not found"
        500:
          description: "Internal server error"
    post:
      tags:
      - "Geospatial Data"
      summary: "Create/Update geospatial data"
      description: "Create/Update geospatial data for the given asset"
      operationId: "updateGeoDataByName"
      produces:
      - "application/json"
      parameters:
      - name: "assetName"
        in: "path"
        description: "Name of geospatial asset"
        required: true
        type: "string"
        x-exportParamName: "AssetName"
      - in: "body"
        name: "geoData"
        description: "Geospatial data"
        required: true
        schema:
          $ref: "#/definitions/GeoDataAsset"
        x-exportParamName: "GeoData"
      responses:
        200:
          description: "OK"
        201:
          description: "Created"
        500:
          description: "Internal server error"
    delete:
      tags:
      - "Geospatial Data"
      summary: "Delete geospatial data"
      description: "Delete geospatial data for the given asset"
      operationId: "deleteGeoDataByName"
      produces:
      - "application/json"
      parameters:
      - name: "assetName"
        in: "path"
        description: "Name of geospatial asset"
        required: true
        type: "string"
        x-exportParamName: "AssetName"
      responses:
        200:
          description: "OK"
        404:
          description: "Not found"
        500:
          description: "Internal server error"
  /geodata/{assetName}/distanceTo:
    post:
      tags:
      - "Geospatial Data"
      summary: "Get distance between geospatial data points"
      description: "Get distance between geospatial data for the given asset and another\
        \ asset or geospatial coordinates"
      operationId: "getDistanceGeoDataByName"
      produces:
      - "application/json"
      parameters:
      - name: "assetName"
        in: "path"
        description: "Name of geospatial asset"
        required: true
        type: "string"
        x-exportParamName: "AssetName"
      - in: "body"
        name: "targetPoint"
        description: "Parameters of geospatial assets"
        required: true
        schema:
          $ref: "#/definitions/TargetPoint"
        x-exportParamName: "TargetPoint"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/Distance"
        404:
          description: "Not found"
        500:
          description: "Internal server error"
  /geodata/{assetName}/withinRange:
    post:
      tags:
      - "Geospatial Data"
      summary: "Returns if a geospatial data points is within a specified distance\
        \ from a location"
      description: "Get geospatial data for the given asset and if it is within range\
        \ of another asset or geospatial coordinates"
      operationId: "getWithinRangeByName"
      produces:
      - "application/json"
      parameters:
      - name: "assetName"
        in: "path"
        description: "Name of geospatial asset"
        required: true
        type: "string"
        x-exportParamName: "AssetName"
      - in: "body"
        name: "targetRange"
        description: "Parameters of geospatial assets"
        required: true
        schema:
          $ref: "#/definitions/TargetRange"
        x-exportParamName: "TargetRange"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/WithinRange"
        404:
          description: "Not found"
        500:
          description: "Internal server error"
  /geodata/cellularPower:
    post:
      tags:
      - "Geospatial Data"
      summary: "Get RSRQ and RSRP values for a list of coordinates"
      description: "Get RSRQ and RSRP values for a list of coordinates"
      operationId: "getGeoDataPowerValues"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "coordinates"
        description: "List of geo coordinates"
        required: true
        schema:
          $ref: "#/definitions/GeoCoordinateList"
        x-exportParamName: "Coordinates"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/CoordinatePowerList"
        404:
          description: "Not found"
        500:
          description: "Internal server error"
definitions:
  AutomationStateList:
    type: "object"
    properties:
      states:
        type: "array"
        items:
          $ref: "#/definitions/AutomationState"
    description: "List of automation states"
    example: {}
  AutomationState:
    type: "object"
    properties:
      type:
        type: "string"
        description: "Automation type.<br> Automation loop evaluates enabled automation\
          \ types once every second.<br>\n<p>Supported Types: <li>MOBILITY - Sends\
          \ Mobility events to Sanbox Controller when UE changes POA. <li>MOVEMENT\
          \ - Advances UEs along configured paths using previous position & velocity\
          \ as inputs. <li>POAS-IN-RANGE - Sends POAS-IN-RANGE events to Sanbox Controller\
          \ when list of POAs in range changes. <li>NETWORK-CHARACTERISTICS-UPDATE\
          \ - Sends network characteristics update events to Sanbox Controller when\
          \ throughput values change."
        enum:
        - "MOBILITY"
        - "MOVEMENT"
        - "POAS-IN-RANGE"
        - "NETWORK-CHARACTERISTICS-UPDATE"
      active:
        type: "boolean"
        description: "Automation feature state"
    example:
      active: true
      type: "MOBILITY"
  CoordinatePowerList:
    type: "object"
    properties:
      coordinatesPower:
        type: "array"
        items:
          $ref: "#/definitions/CoordinatePower"
    description: "List of geo coordinates with RSRQ/RSRP values"
    example:
      coordinatesPower:
      - latitude: 43.73651
        longitude: 7.421802
        rsrq: 21
        rsrp: 63
        poaName: "4g-macro-cell-6"
      - latitude: 43.747787
        longitude: 7.434856
        rsrq: 58
        rsrp: 60
        poaName: "5G-small-cell-15"
  CoordinatePower:
    required:
    - "latitude"
    - "longitude"
    - "poaName"
    - "rsrp"
    - "rsrq"
    properties:
      latitude:
        type: "number"
        format: "float"
        description: "Latitude of a second element for query purpose."
      longitude:
        type: "number"
        format: "float"
        description: "Longitude of a second element for query purpose."
      rsrq:
        type: "integer"
        format: "int32"
        description: "Reference Signal Received Quality as defined in ETSI TS 136\
          \ 214."
      rsrp:
        type: "integer"
        format: "int32"
        description: "Reference Signal Received Power as defined in ETSI TS 136 214."
      poaName:
        type: "string"
        description: "Name of the POA for which RSRP/RSRQ values are calculated."
    description: "Coordinates with their power values."
    example:
      latitude: 0.8008282
      longitude: 6.0274563
      rsrq: -2
      rsrp: 40
      poaName: "5G-macro-cell-15"
  GeoCoordinateList:
    type: "object"
    properties:
      geoCoordinates:
        type: "array"
        items:
          $ref: "#/definitions/GeoCoordinate"
    description: "List of geo-coordinates"
    example:
      geoCoordinates:
      - latitude: 43.73651
        longitude: 7.421802
      - latitude: 43.73736
        longitude: 7.42821
  GeoCoordinate:
    type: "object"
    properties:
      latitude:
        type: "number"
        format: "float"
        description: "Latitude of a second element for query purpose."
      longitude:
        type: "number"
        format: "float"
        description: "Longitude of a second element for query purpose."
    description: "Geo-coordinates for cellular power."
    example:
      latitude: 0.8008282
      longitude: 6.0274563
  TargetPoint:
    type: "object"
    properties:
      assetName:
        type: "string"
        description: "Asset name of a second element for query purpose. If present,\
          \ latitude and longitude are ignored."
      latitude:
        type: "number"
        format: "float"
        description: "Latitude of a second element for query purpose. Taken into account\
          \ only if AssetName is not present."
      longitude:
        type: "number"
        format: "float"
        description: "Longitude of a second element for query purpose. Taken into\
          \ account only if AssetName is not present."
    description: "Parameters for distance query purpose."
    example:
      latitude: 0.8008282
      assetName: "assetName"
      longitude: 6.0274563
  Distance:
    type: "object"
    required:
    - "distance"
    properties:
      distance:
        type: "number"
        format: "float"
        description: "Distance between two points (in meters)"
      srcLatitude:
        type: "number"
        format: "float"
        description: "Source asset latitude"
      srcLongitude:
        type: "number"
        format: "float"
        description: "Source asset longitude"
      dstLatitude:
        type: "number"
        format: "float"
        description: "Destination asset latitude"
      dstLongitude:
        type: "number"
        format: "float"
        description: "Destination asset longitude"
    description: "Distance response"
    example:
      dstLongitude: 5.637377
      distance: 0.8008282
      srcLongitude: 1.4658129
      srcLatitude: 6.0274563
      dstLatitude: 5.962134
  GeoDataAssetList:
    type: "object"
    properties:
      geoDataAssets:
        type: "array"
        items:
          $ref: "#/definitions/GeoDataAsset"
    description: "List of geospatial assets data"
    example: {}
  GeoDataAsset:
    allOf:
    - type: "object"
      required:
      - "assetName"
      - "assetType"
      properties:
        assetName:
          type: "string"
          description: "Name of geospatial asset"
        assetType:
          type: "string"
          description: "Asset type"
          enum:
          - "UE"
          - "POA"
          - "COMPUTE"
        subType:
          type: "string"
          description: "Asset sub-type"
          enum:
          - "UE"
          - "POA"
          - "POA-4G"
          - "POA-5G"
          - "POA-WIFI"
          - "EDGE"
          - "FOG"
          - "CLOUD"
    - $ref: "#/definitions/GeoData"
    description: "List of geospatial data"
  TargetRange:
    type: "object"
    required:
    - "radius"
    properties:
      assetName:
        type: "string"
        description: "Asset name of a second element for query purpose. If present,\
          \ latitude and longitude are ignored."
      latitude:
        type: "number"
        format: "float"
        description: "Latitude of a second element for query purpose. Taken into account\
          \ only if AssetName is not present."
      longitude:
        type: "number"
        format: "float"
        description: "Longitude of a second element for query purpose. Taken into\
          \ account only if AssetName is not present."
      radius:
        type: "number"
        format: "float"
        description: "Radius (in meters) around the location."
      accuracy:
        type: "number"
        format: "float"
        description: "Accuracy of the location (in meters)."
    description: "Parameters for within range query purpose."
    example:
      latitude: 0.8008282
      assetName: "assetName"
      accuracy: 5.962134
      radius: 1.4658129
      longitude: 6.0274563
  WithinRange:
    type: "object"
    required:
    - "within"
    properties:
      srcLatitude:
        type: "number"
        format: "float"
        description: "Source asset latitude"
      srcLongitude:
        type: "number"
        format: "float"
        description: "Source asset longitude"
      dstLatitude:
        type: "number"
        format: "float"
        description: "Destination asset latitude"
      dstLongitude:
        type: "number"
        format: "float"
        description: "Destination asset longitude"
      within:
        type: "boolean"
        description: "Within range result (e.g. true = within range, false = beyond\
          \ range)"
    description: "Within range response"
    example:
      dstLongitude: 5.962134
      within: true
      srcLongitude: 6.0274563
      srcLatitude: 0.8008282
      dstLatitude: 1.4658129
  GeoData:
    type: "object"
    properties:
      location:
        $ref: "#/definitions/Point"
      radius:
        type: "number"
        description: "Optional - Radius (in meters) around the location"
      path:
        $ref: "#/definitions/LineString"
      eopMode:
        type: "string"
        description: "End-of-Path mode: <li>LOOP: When path endpoint is reached, start\
          \ over from the beginning <li>REVERSE: When path endpoint is reached, return\
          \ on the reverse path"
        enum:
        - "LOOP"
        - "REVERSE"
      velocity:
        type: "number"
        description: "Speed of movement along path in m/s"
      d2dInRange:
        type: "array"
        items:
          type: "string"
          description: "D2D UEs visible to UE"
      poaInRange:
        type: "array"
        items:
          type: "string"
          description: "POAs visible to UE"
    description: "Geographic data"
  Point:
    type: "object"
    required:
    - "type"
    properties:
      type:
        type: "string"
        description: "Must be Point"
        enum:
        - "Point"
      coordinates:
        type: "array"
        description: "For a Point, coordinates MUST be an array of two decimal numbers;\
          \ longitude and latitude precisely in that order"
        items:
          type: "number"
    externalDocs:
      url: "https://tools.ietf.org/html/rfc7946"
    description: "A single position in coordinate space (GeoJSON); a position is an\
      \ array of two numbers"
  LineString:
    type: "object"
    required:
    - "type"
    properties:
      type:
        type: "string"
        description: "Must be LineString"
        enum:
        - "LineString"
      coordinates:
        type: "array"
        description: "For a LineString, coordinates is an array of two or more positions;\
          \ a position is an array of two decimal numbers (longitude and latitude\
          \ precisely in that order)"
        items:
          type: "array"
          items:
            type: "number"
    externalDocs:
      url: "https://tools.ietf.org/html/rfc7946"
    description: "An array of two or more positions in coordinate space (GeoJSON);\
      \ a position is an array of two numbers"
responses:
  Std200:
    description: "OK"
  Std201:
    description: "Created"
  Std202:
    description: "Accepted"
  Std204:
    description: "No content"
  Std304:
    description: "Not modified"
  Std400:
    description: "Bad request"
  Std401:
    description: "Not authorized"
  Std403:
    description: "Forbidden"
  Std404:
    description: "Not found"
  Std409:
    description: "Conflict"
  Std416:
    description: "Requested range not satisfiable"
  Std500:
    description: "Internal server error"
externalDocs:
  description: "GitHub Wiki"
  url: "https://github.com/InterDigitalInc/AdvantEDGE/wiki"
