/*
 * Copyright (c) 2022  The AdvantEDGE Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * AdvantEDGE Metrics Service REST API
 * Metrics Service provides metrics about the active scenario <p>**Micro-service**<br>[meep-metrics-engine](https://github.com/InterDigitalInc/AdvantEDGE/tree/master/go-apps/meep-metrics-engine) <p>**Type & Usage**<br>Platform Service used by control/monitoring software and possibly by edge applications that require metrics <p>**Details**<br>API details available at _your-AdvantEDGE-ip-address/api_
 *
 * OpenAPI spec version: 1.0.0
 * Contact: AdvantEDGE@InterDigital.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.9
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AdvantEdgeMetricsServiceRestApi);
  }
}(this, function(expect, AdvantEdgeMetricsServiceRestApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('HttpMetric', function() {
      beforeEach(function() {
        instance = new AdvantEdgeMetricsServiceRestApi.HttpMetric();
      });

      it('should create an instance of HttpMetric', function() {
        // TODO: update the code to test HttpMetric
        expect(instance).to.be.a(AdvantEdgeMetricsServiceRestApi.HttpMetric);
      });

      it('should have the property time (base name: "time")', function() {
        // TODO: update the code to test the property time
        expect(instance).to.have.property('time');
        // expect(instance.time).to.be(expectedValueLiteral);
      });

      it('should have the property id (base name: "id")', function() {
        // TODO: update the code to test the property id
        expect(instance).to.have.property('id');
        // expect(instance.id).to.be(expectedValueLiteral);
      });

      it('should have the property endpoint (base name: "endpoint")', function() {
        // TODO: update the code to test the property endpoint
        expect(instance).to.have.property('endpoint');
        // expect(instance.endpoint).to.be(expectedValueLiteral);
      });

      it('should have the property url (base name: "url")', function() {
        // TODO: update the code to test the property url
        expect(instance).to.have.property('url');
        // expect(instance.url).to.be(expectedValueLiteral);
      });

      it('should have the property method (base name: "method")', function() {
        // TODO: update the code to test the property method
        expect(instance).to.have.property('method');
        // expect(instance.method).to.be(expectedValueLiteral);
      });

      it('should have the property respCode (base name: "resp_code")', function() {
        // TODO: update the code to test the property respCode
        expect(instance).to.have.property('respCode');
        // expect(instance.respCode).to.be(expectedValueLiteral);
      });

      it('should have the property respBody (base name: "resp_body")', function() {
        // TODO: update the code to test the property respBody
        expect(instance).to.have.property('respBody');
        // expect(instance.respBody).to.be(expectedValueLiteral);
      });

      it('should have the property body (base name: "body")', function() {
        // TODO: update the code to test the property body
        expect(instance).to.have.property('body');
        // expect(instance.body).to.be(expectedValueLiteral);
      });

      it('should have the property procTime (base name: "proc_time")', function() {
        // TODO: update the code to test the property procTime
        expect(instance).to.have.property('procTime');
        // expect(instance.procTime).to.be(expectedValueLiteral);
      });

      it('should have the property loggerName (base name: "logger_name")', function() {
        // TODO: update the code to test the property loggerName
        expect(instance).to.have.property('loggerName');
        // expect(instance.loggerName).to.be(expectedValueLiteral);
      });

      it('should have the property msgType (base name: "msg_type")', function() {
        // TODO: update the code to test the property msgType
        expect(instance).to.have.property('msgType');
        // expect(instance.msgType).to.be(expectedValueLiteral);
      });

      it('should have the property direction (base name: "direction")', function() {
        // TODO: update the code to test the property direction
        expect(instance).to.have.property('direction');
        // expect(instance.direction).to.be(expectedValueLiteral);
      });

    });
  });

}));
