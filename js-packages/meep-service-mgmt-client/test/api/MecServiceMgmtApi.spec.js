/*
 * Copyright (c) 2020  InterDigital Communications, Inc
 *
 * Licensed under the Apache License, Version 2.0 (the \"License\");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an \"AS IS\" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * AdvantEDGE MEC Service Management API
 * MEC Service Management Service is AdvantEDGE's implementation of [ETSI MEC ISG MEC011 Application Enablement API](https://www.etsi.org/deliver/etsi_gs/MEC/001_099/011/02.01.01_60/gs_MEC011v020101p.pdf) <p>[Copyright (c) ETSI 2017](https://forge.etsi.org/etsi-forge-copyright-notice.txt) <p>**Micro-service**<br>[meep-app-enablement](https://github.com/InterDigitalInc/AdvantEDGE/tree/master/go-apps/meep-app-enablement/server/service-mgmt) <p>**Type & Usage**<br>Edge Service used by edge applications that want to get information about services in the network <p>**Note**<br>AdvantEDGE supports all of Service Management API endpoints (see below).
 *
 * OpenAPI spec version: 2.1.1
 * Contact: AdvantEDGE@InterDigital.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.29
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AdvantEdgeMecServiceManagementApi);
  }
}(this, function(expect, AdvantEdgeMecServiceManagementApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AdvantEdgeMecServiceManagementApi.MecServiceMgmtApi();
  });

  describe('(package)', function() {
    describe('MecServiceMgmtApi', function() {
      describe('appServicesGET', function() {
        it('should call appServicesGET successfully', function(done) {
          // TODO: uncomment, update parameter values for appServicesGET call and complete the assertions
          /*
          var opts = {};

          instance.appServicesGET(appInstanceId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(AdvantEdgeMecServiceManagementApi.ServiceInfo);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('appServicesPOST', function() {
        it('should call appServicesPOST successfully', function(done) {
          // TODO: uncomment, update parameter values for appServicesPOST call and complete the assertions
          /*

          instance.appServicesPOST(body, appInstanceId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(AdvantEdgeMecServiceManagementApi.ServiceInfo);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('appServicesServiceIdDELETE', function() {
        it('should call appServicesServiceIdDELETE successfully', function(done) {
          // TODO: uncomment, update parameter values for appServicesServiceIdDELETE call
          /*

          instance.appServicesServiceIdDELETE(appInstanceId, serviceId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('appServicesServiceIdGET', function() {
        it('should call appServicesServiceIdGET successfully', function(done) {
          // TODO: uncomment, update parameter values for appServicesServiceIdGET call and complete the assertions
          /*

          instance.appServicesServiceIdGET(appInstanceId, serviceId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(AdvantEdgeMecServiceManagementApi.ServiceInfo);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('appServicesServiceIdPUT', function() {
        it('should call appServicesServiceIdPUT successfully', function(done) {
          // TODO: uncomment, update parameter values for appServicesServiceIdPUT call and complete the assertions
          /*

          instance.appServicesServiceIdPUT(body, appInstanceId, serviceId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(AdvantEdgeMecServiceManagementApi.ServiceInfo);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('applicationsSubscriptionDELETE', function() {
        it('should call applicationsSubscriptionDELETE successfully', function(done) {
          // TODO: uncomment, update parameter values for applicationsSubscriptionDELETE call
          /*

          instance.applicationsSubscriptionDELETE(appInstanceId, subscriptionId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('applicationsSubscriptionGET', function() {
        it('should call applicationsSubscriptionGET successfully', function(done) {
          // TODO: uncomment, update parameter values for applicationsSubscriptionGET call and complete the assertions
          /*

          instance.applicationsSubscriptionGET(appInstanceId, subscriptionId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(AdvantEdgeMecServiceManagementApi.SerAvailabilityNotificationSubscription);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('applicationsSubscriptionsGET', function() {
        it('should call applicationsSubscriptionsGET successfully', function(done) {
          // TODO: uncomment, update parameter values for applicationsSubscriptionsGET call and complete the assertions
          /*

          instance.applicationsSubscriptionsGET(appInstanceId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(AdvantEdgeMecServiceManagementApi.SubscriptionLinkList);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('applicationsSubscriptionsPOST', function() {
        it('should call applicationsSubscriptionsPOST successfully', function(done) {
          // TODO: uncomment, update parameter values for applicationsSubscriptionsPOST call and complete the assertions
          /*

          instance.applicationsSubscriptionsPOST(body, appInstanceId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(AdvantEdgeMecServiceManagementApi.SerAvailabilityNotificationSubscription);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('servicesGET', function() {
        it('should call servicesGET successfully', function(done) {
          // TODO: uncomment, update parameter values for servicesGET call and complete the assertions
          /*
          var opts = {};

          instance.servicesGET(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(AdvantEdgeMecServiceManagementApi.ServiceInfo);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('servicesServiceIdGET', function() {
        it('should call servicesServiceIdGET successfully', function(done) {
          // TODO: uncomment, update parameter values for servicesServiceIdGET call and complete the assertions
          /*

          instance.servicesServiceIdGET(serviceId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(AdvantEdgeMecServiceManagementApi.ServiceInfo);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('transportsGET', function() {
        it('should call transportsGET successfully', function(done) {
          // TODO: uncomment transportsGET call and complete the assertions
          /*

          instance.transportsGET(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(AdvantEdgeMecServiceManagementApi.TransportInfo);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
