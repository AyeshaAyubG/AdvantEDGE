/*
 * Copyright (c) 2020  InterDigital Communications, Inc
 *
 * Licensed under the Apache License, Version 2.0 (the \"License\");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an \"AS IS\" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * AdvantEDGE MEC Application Support API
 * MEC Application Support Service is AdvantEDGE's implementation of [ETSI MEC ISG MEC011 Application Enablement API](https://www.etsi.org/deliver/etsi_gs/MEC/001_099/011/02.01.01_60/gs_MEC011v020101p.pdf) <p>[Copyright (c) ETSI 2017](https://forge.etsi.org/etsi-forge-copyright-notice.txt) <p>**Micro-service**<br>[meep-app-enablement](https://github.com/InterDigitalInc/AdvantEDGE/tree/master/go-apps/meep-app-enablement/server/app-support) <p>**Type & Usage**<br>Edge Service used by edge applications that want to get information about applications in the network <p>**Note**<br>AdvantEDGE supports a selected subset of Application Support API endpoints (see below).
 *
 * OpenAPI spec version: 2.1.1
 * Contact: AdvantEDGE@InterDigital.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.29
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AdvantEdgeMecApplicationSupportApi);
  }
}(this, function(expect, AdvantEdgeMecApplicationSupportApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AdvantEdgeMecApplicationSupportApi.UnsupportedApi();
  });

  describe('(package)', function() {
    describe('UnsupportedApi', function() {
      describe('applicationsDnsRuleGET', function() {
        it('should call applicationsDnsRuleGET successfully', function(done) {
          // TODO: uncomment, update parameter values for applicationsDnsRuleGET call and complete the assertions
          /*

          instance.applicationsDnsRuleGET(appInstanceId, dnsRuleId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(AdvantEdgeMecApplicationSupportApi.DnsRule);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('applicationsDnsRulePUT', function() {
        it('should call applicationsDnsRulePUT successfully', function(done) {
          // TODO: uncomment, update parameter values for applicationsDnsRulePUT call and complete the assertions
          /*

          instance.applicationsDnsRulePUT(body, appInstanceId, dnsRuleId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(AdvantEdgeMecApplicationSupportApi.DnsRule);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('applicationsDnsRulesGET', function() {
        it('should call applicationsDnsRulesGET successfully', function(done) {
          // TODO: uncomment, update parameter values for applicationsDnsRulesGET call and complete the assertions
          /*

          instance.applicationsDnsRulesGET(appInstanceId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(AdvantEdgeMecApplicationSupportApi.DnsRule);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('applicationsTrafficRuleGET', function() {
        it('should call applicationsTrafficRuleGET successfully', function(done) {
          // TODO: uncomment, update parameter values for applicationsTrafficRuleGET call and complete the assertions
          /*

          instance.applicationsTrafficRuleGET(appInstanceId, trafficRuleId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(AdvantEdgeMecApplicationSupportApi.TrafficRule);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('applicationsTrafficRulePUT', function() {
        it('should call applicationsTrafficRulePUT successfully', function(done) {
          // TODO: uncomment, update parameter values for applicationsTrafficRulePUT call and complete the assertions
          /*

          instance.applicationsTrafficRulePUT(body, appInstanceId, trafficRuleId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(AdvantEdgeMecApplicationSupportApi.TrafficRule);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('applicationsTrafficRulesGET', function() {
        it('should call applicationsTrafficRulesGET successfully', function(done) {
          // TODO: uncomment, update parameter values for applicationsTrafficRulesGET call and complete the assertions
          /*

          instance.applicationsTrafficRulesGET(appInstanceId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(AdvantEdgeMecApplicationSupportApi.TrafficRule);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
