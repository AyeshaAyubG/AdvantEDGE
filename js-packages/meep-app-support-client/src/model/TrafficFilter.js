/*
 * Copyright (c) 2020  InterDigital Communications, Inc
 *
 * Licensed under the Apache License, Version 2.0 (the \"License\");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an \"AS IS\" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * AdvantEDGE MEC Application Support API
 * MEC Application Support Service is AdvantEDGE's implementation of [ETSI MEC ISG MEC011 Application Enablement API](https://www.etsi.org/deliver/etsi_gs/MEC/001_099/011/02.01.01_60/gs_MEC011v020101p.pdf) <p>[Copyright (c) ETSI 2017](https://forge.etsi.org/etsi-forge-copyright-notice.txt) <p>**Micro-service**<br>[meep-app-enablement](https://github.com/InterDigitalInc/AdvantEDGE/tree/master/go-apps/meep-app-enablement/server/app-support) <p>**Type & Usage**<br>Edge Service used by edge applications that want to get information about applications in the network <p>**Note**<br>AdvantEDGE supports a selected subset of Application Support API endpoints (see below).
 *
 * OpenAPI spec version: 2.1.1
 * Contact: AdvantEDGE@InterDigital.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.22
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.AdvantEdgeMecApplicationSupportApi) {
      root.AdvantEdgeMecApplicationSupportApi = {};
    }
    root.AdvantEdgeMecApplicationSupportApi.TrafficFilter = factory(root.AdvantEdgeMecApplicationSupportApi.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';

  /**
   * The TrafficFilter model module.
   * @module model/TrafficFilter
   * @version 2.1.1
   */

  /**
   * Constructs a new <code>TrafficFilter</code>.
   * This type represents the traffic filter.
   * @alias module:model/TrafficFilter
   * @class
   */
  var exports = function() {
  };

  /**
   * Constructs a <code>TrafficFilter</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/TrafficFilter} obj Optional instance to populate.
   * @return {module:model/TrafficFilter} The populated <code>TrafficFilter</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();
      if (data.hasOwnProperty('srcAddress'))
        obj.srcAddress = ApiClient.convertToType(data['srcAddress'], ['String']);
      if (data.hasOwnProperty('dstAddress'))
        obj.dstAddress = ApiClient.convertToType(data['dstAddress'], ['String']);
      if (data.hasOwnProperty('srcPort'))
        obj.srcPort = ApiClient.convertToType(data['srcPort'], ['String']);
      if (data.hasOwnProperty('dstPort'))
        obj.dstPort = ApiClient.convertToType(data['dstPort'], ['String']);
      if (data.hasOwnProperty('protocol'))
        obj.protocol = ApiClient.convertToType(data['protocol'], ['String']);
      if (data.hasOwnProperty('token'))
        obj.token = ApiClient.convertToType(data['token'], ['String']);
      if (data.hasOwnProperty('srcTunnelAddress'))
        obj.srcTunnelAddress = ApiClient.convertToType(data['srcTunnelAddress'], ['String']);
      if (data.hasOwnProperty('tgtTunnelAddress'))
        obj.tgtTunnelAddress = ApiClient.convertToType(data['tgtTunnelAddress'], ['String']);
      if (data.hasOwnProperty('srcTunnelPort'))
        obj.srcTunnelPort = ApiClient.convertToType(data['srcTunnelPort'], ['String']);
      if (data.hasOwnProperty('dstTunnelPort'))
        obj.dstTunnelPort = ApiClient.convertToType(data['dstTunnelPort'], ['String']);
      if (data.hasOwnProperty('qCI'))
        obj.qCI = ApiClient.convertToType(data['qCI'], 'Number');
      if (data.hasOwnProperty('dSCP'))
        obj.dSCP = ApiClient.convertToType(data['dSCP'], 'Number');
      if (data.hasOwnProperty('tC'))
        obj.tC = ApiClient.convertToType(data['tC'], 'Number');
    }
    return obj;
  }

  /**
   * An IP address or a range of IP address. For IPv4, the IP address could be an IP address plus mask, or an individual IP address, or a range of IP addresses. For IPv6, the IP address could be an IP prefix, or a range of IP prefixes.
   * @member {Array.<String>} srcAddress
   */
  exports.prototype.srcAddress = undefined;

  /**
   * An IP address or a range of IP address. For IPv4, the IP address could be an IP address plus mask, or an individual IP address, or a range of IP addresses. For IPv6, the IP address could be an IP prefix, or a range of IP prefixes.
   * @member {Array.<String>} dstAddress
   */
  exports.prototype.dstAddress = undefined;

  /**
   * A port or a range of ports
   * @member {Array.<String>} srcPort
   */
  exports.prototype.srcPort = undefined;

  /**
   * A port or a range of ports
   * @member {Array.<String>} dstPort
   */
  exports.prototype.dstPort = undefined;

  /**
   * Specify the protocol of the traffic filter
   * @member {Array.<String>} protocol
   */
  exports.prototype.protocol = undefined;

  /**
   * Used for token based traffic rule
   * @member {Array.<String>} token
   */
  exports.prototype.token = undefined;

  /**
   * Used for GTP tunnel based traffic rule
   * @member {Array.<String>} srcTunnelAddress
   */
  exports.prototype.srcTunnelAddress = undefined;

  /**
   * Used for GTP tunnel based traffic rule
   * @member {Array.<String>} tgtTunnelAddress
   */
  exports.prototype.tgtTunnelAddress = undefined;

  /**
   * Used for GTP tunnel based traffic rule
   * @member {Array.<String>} srcTunnelPort
   */
  exports.prototype.srcTunnelPort = undefined;

  /**
   * Used for GTP tunnel based traffic rule
   * @member {Array.<String>} dstTunnelPort
   */
  exports.prototype.dstTunnelPort = undefined;

  /**
   * Used to match all packets that have the same Quality Class Indicator (QCI).
   * @member {Number} qCI
   */
  exports.prototype.qCI = undefined;

  /**
   * Used to match all IPv4 packets that have the same Differentiated Services Code Point (DSCP)
   * @member {Number} dSCP
   */
  exports.prototype.dSCP = undefined;

  /**
   * Used to match all IPv6 packets that have the same Traffic Class.
   * @member {Number} tC
   */
  exports.prototype.tC = undefined;

  return exports;

}));
