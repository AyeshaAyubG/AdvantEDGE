/*
 * Copyright (c) 2020  InterDigital Communications, Inc
 *
 * Licensed under the Apache License, Version 2.0 (the \"License\");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an \"AS IS\" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * AdvantEDGE MEC Application Support API
 * MEC Application Support Service is AdvantEDGE's implementation of [ETSI MEC ISG MEC011 Application Enablement API](https://www.etsi.org/deliver/etsi_gs/MEC/001_099/011/02.01.01_60/gs_MEC011v020101p.pdf) <p>[Copyright (c) ETSI 2017](https://forge.etsi.org/etsi-forge-copyright-notice.txt) <p>**Micro-service**<br>[meep-app-enablement](https://github.com/InterDigitalInc/AdvantEDGE/tree/master/go-apps/meep-app-enablement/server/app-support) <p>**Type & Usage**<br>Edge Service used by edge applications that want to get information about applications in the network <p>**Note**<br>AdvantEDGE supports a selected subset of Application Support API endpoints (see below).
 *
 * OpenAPI spec version: 2.1.1
 * Contact: AdvantEDGE@InterDigital.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.29
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.AdvantEdgeMecApplicationSupportApi) {
      root.AdvantEdgeMecApplicationSupportApi = {};
    }
    root.AdvantEdgeMecApplicationSupportApi.DnsRule = factory(root.AdvantEdgeMecApplicationSupportApi.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';

  /**
   * The DnsRule model module.
   * @module model/DnsRule
   * @version 2.1.1
   */

  /**
   * Constructs a new <code>DnsRule</code>.
   * This type represents the general information of a DNS rule.
   * @alias module:model/DnsRule
   * @class
   * @param dnsRuleId {String} Identifies the DNS Rule
   * @param domainName {String} FQDN resolved by the DNS rule
   * @param ipAddressType {module:model/DnsRule.IpAddressTypeEnum} IP address type
   * @param ipAddress {String} IP address associated with the FQDN resolved by the DNS rule
   * @param state {module:model/DnsRule.StateEnum} DNS rule state. This attribute may be updated using HTTP PUT method
   */
  var exports = function(dnsRuleId, domainName, ipAddressType, ipAddress, state) {
    this.dnsRuleId = dnsRuleId;
    this.domainName = domainName;
    this.ipAddressType = ipAddressType;
    this.ipAddress = ipAddress;
    this.state = state;
  };

  /**
   * Constructs a <code>DnsRule</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/DnsRule} obj Optional instance to populate.
   * @return {module:model/DnsRule} The populated <code>DnsRule</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();
      if (data.hasOwnProperty('dnsRuleId'))
        obj.dnsRuleId = ApiClient.convertToType(data['dnsRuleId'], 'String');
      if (data.hasOwnProperty('domainName'))
        obj.domainName = ApiClient.convertToType(data['domainName'], 'String');
      if (data.hasOwnProperty('ipAddressType'))
        obj.ipAddressType = ApiClient.convertToType(data['ipAddressType'], 'String');
      if (data.hasOwnProperty('ipAddress'))
        obj.ipAddress = ApiClient.convertToType(data['ipAddress'], 'String');
      if (data.hasOwnProperty('ttl'))
        obj.ttl = ApiClient.convertToType(data['ttl'], 'Number');
      if (data.hasOwnProperty('state'))
        obj.state = ApiClient.convertToType(data['state'], 'String');
    }
    return obj;
  }

  /**
   * Identifies the DNS Rule
   * @member {String} dnsRuleId
   */
  exports.prototype.dnsRuleId = undefined;

  /**
   * FQDN resolved by the DNS rule
   * @member {String} domainName
   */
  exports.prototype.domainName = undefined;

  /**
   * IP address type
   * @member {module:model/DnsRule.IpAddressTypeEnum} ipAddressType
   */
  exports.prototype.ipAddressType = undefined;

  /**
   * IP address associated with the FQDN resolved by the DNS rule
   * @member {String} ipAddress
   */
  exports.prototype.ipAddress = undefined;

  /**
   * Time to live value
   * @member {Number} ttl
   */
  exports.prototype.ttl = undefined;

  /**
   * DNS rule state. This attribute may be updated using HTTP PUT method
   * @member {module:model/DnsRule.StateEnum} state
   */
  exports.prototype.state = undefined;


  /**
   * Allowed values for the <code>ipAddressType</code> property.
   * @enum {String}
   * @readonly
   */
  exports.IpAddressTypeEnum = {
    /**
     * value: "IP_V6"
     * @const
     */
    v6: "IP_V6",

    /**
     * value: "IP_V4"
     * @const
     */
    v4: "IP_V4"
  };


  /**
   * Allowed values for the <code>state</code> property.
   * @enum {String}
   * @readonly
   */
  exports.StateEnum = {
    /**
     * value: "ACTIVE"
     * @const
     */
    ACTIVE: "ACTIVE",

    /**
     * value: "INACTIVE"
     * @const
     */
    INACTIVE: "INACTIVE"
  };

  return exports;

}));
