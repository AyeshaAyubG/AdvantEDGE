/*
 * Copyright (c) 2020  InterDigital Communications, Inc
 *
 * Licensed under the Apache License, Version 2.0 (the \"License\");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an \"AS IS\" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * AdvantEDGE MEC Application Support API
 * MEC Application Support Service is AdvantEDGE's implementation of [ETSI MEC ISG MEC011 Application Enablement API](https://www.etsi.org/deliver/etsi_gs/MEC/001_099/011/02.01.01_60/gs_MEC011v020101p.pdf) <p>[Copyright (c) ETSI 2017](https://forge.etsi.org/etsi-forge-copyright-notice.txt) <p>**Micro-service**<br>[meep-app-enablement](https://github.com/InterDigitalInc/AdvantEDGE/tree/master/go-apps/meep-app-enablement/server/app-support) <p>**Type & Usage**<br>Edge Service used by edge applications that want to get information about applications in the network <p>**Note**<br>AdvantEDGE supports a selected subset of Application Support API endpoints (see below).
 *
 * OpenAPI spec version: 2.1.1
 * Contact: AdvantEDGE@InterDigital.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.29
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/DnsRule', 'model/ProblemDetails', 'model/TrafficRule'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/DnsRule'), require('../model/ProblemDetails'), require('../model/TrafficRule'));
  } else {
    // Browser globals (root is window)
    if (!root.AdvantEdgeMecApplicationSupportApi) {
      root.AdvantEdgeMecApplicationSupportApi = {};
    }
    root.AdvantEdgeMecApplicationSupportApi.UnsupportedApi = factory(root.AdvantEdgeMecApplicationSupportApi.ApiClient, root.AdvantEdgeMecApplicationSupportApi.DnsRule, root.AdvantEdgeMecApplicationSupportApi.ProblemDetails, root.AdvantEdgeMecApplicationSupportApi.TrafficRule);
  }
}(this, function(ApiClient, DnsRule, ProblemDetails, TrafficRule) {
  'use strict';

  /**
   * Unsupported service.
   * @module api/UnsupportedApi
   * @version 2.1.1
   */

  /**
   * Constructs a new UnsupportedApi. 
   * @alias module:api/UnsupportedApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the applicationsDnsRuleGET operation.
     * @callback module:api/UnsupportedApi~applicationsDnsRuleGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DnsRule} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method retrieves information about a DNS rule associated with a MEC application instance.
     * @param {String} appInstanceId Represents a MEC application instance. Note that the appInstanceId is allocated by the MEC platform manager.
     * @param {String} dnsRuleId Represents a DNS rule.
     * @param {module:api/UnsupportedApi~applicationsDnsRuleGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DnsRule}
     */
    this.applicationsDnsRuleGET = function(appInstanceId, dnsRuleId, callback) {
      var postBody = null;

      // verify the required parameter 'appInstanceId' is set
      if (appInstanceId === undefined || appInstanceId === null) {
        throw new Error("Missing the required parameter 'appInstanceId' when calling applicationsDnsRuleGET");
      }

      // verify the required parameter 'dnsRuleId' is set
      if (dnsRuleId === undefined || dnsRuleId === null) {
        throw new Error("Missing the required parameter 'dnsRuleId' when calling applicationsDnsRuleGET");
      }


      var pathParams = {
        'appInstanceId': appInstanceId,
        'dnsRuleId': dnsRuleId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'application/problem+json'];
      var returnType = DnsRule;

      return this.apiClient.callApi(
        '/applications/{appInstanceId}/dns_rules/{dnsRuleId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the applicationsDnsRulePUT operation.
     * @callback module:api/UnsupportedApi~applicationsDnsRulePUTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DnsRule} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method activates, de-activates or updates a traffic rule.
     * @param {module:model/DnsRule} body The updated state is included in the entity body of the request.
     * @param {String} appInstanceId Represents a MEC application instance. Note that the appInstanceId is allocated by the MEC platform manager.
     * @param {String} dnsRuleId Represents a DNS rule.
     * @param {module:api/UnsupportedApi~applicationsDnsRulePUTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DnsRule}
     */
    this.applicationsDnsRulePUT = function(body, appInstanceId, dnsRuleId, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling applicationsDnsRulePUT");
      }

      // verify the required parameter 'appInstanceId' is set
      if (appInstanceId === undefined || appInstanceId === null) {
        throw new Error("Missing the required parameter 'appInstanceId' when calling applicationsDnsRulePUT");
      }

      // verify the required parameter 'dnsRuleId' is set
      if (dnsRuleId === undefined || dnsRuleId === null) {
        throw new Error("Missing the required parameter 'dnsRuleId' when calling applicationsDnsRulePUT");
      }


      var pathParams = {
        'appInstanceId': appInstanceId,
        'dnsRuleId': dnsRuleId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/problem+json'];
      var returnType = DnsRule;

      return this.apiClient.callApi(
        '/applications/{appInstanceId}/dns_rules/{dnsRuleId}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the applicationsDnsRulesGET operation.
     * @callback module:api/UnsupportedApi~applicationsDnsRulesGETCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DnsRule>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method retrieves information about all the DNS rules associated with a MEC application instance.
     * @param {String} appInstanceId Represents a MEC application instance. Note that the appInstanceId is allocated by the MEC platform manager.
     * @param {module:api/UnsupportedApi~applicationsDnsRulesGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/DnsRule>}
     */
    this.applicationsDnsRulesGET = function(appInstanceId, callback) {
      var postBody = null;

      // verify the required parameter 'appInstanceId' is set
      if (appInstanceId === undefined || appInstanceId === null) {
        throw new Error("Missing the required parameter 'appInstanceId' when calling applicationsDnsRulesGET");
      }


      var pathParams = {
        'appInstanceId': appInstanceId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'application/problem+json'];
      var returnType = [DnsRule];

      return this.apiClient.callApi(
        '/applications/{appInstanceId}/dns_rules', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the applicationsTrafficRuleGET operation.
     * @callback module:api/UnsupportedApi~applicationsTrafficRuleGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TrafficRule} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method retrieves information about all the traffic rules associated with a MEC application instance.
     * @param {String} appInstanceId Represents a MEC application instance. Note that the appInstanceId is allocated by the MEC platform manager.
     * @param {String} trafficRuleId Represents a traffic rule.
     * @param {module:api/UnsupportedApi~applicationsTrafficRuleGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TrafficRule}
     */
    this.applicationsTrafficRuleGET = function(appInstanceId, trafficRuleId, callback) {
      var postBody = null;

      // verify the required parameter 'appInstanceId' is set
      if (appInstanceId === undefined || appInstanceId === null) {
        throw new Error("Missing the required parameter 'appInstanceId' when calling applicationsTrafficRuleGET");
      }

      // verify the required parameter 'trafficRuleId' is set
      if (trafficRuleId === undefined || trafficRuleId === null) {
        throw new Error("Missing the required parameter 'trafficRuleId' when calling applicationsTrafficRuleGET");
      }


      var pathParams = {
        'appInstanceId': appInstanceId,
        'trafficRuleId': trafficRuleId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'application/problem+json'];
      var returnType = TrafficRule;

      return this.apiClient.callApi(
        '/applications/{appInstanceId}/traffic_rules/{trafficRuleId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the applicationsTrafficRulePUT operation.
     * @callback module:api/UnsupportedApi~applicationsTrafficRulePUTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TrafficRule} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method retrieves information about all the traffic rules associated with a MEC application instance.
     * @param {module:model/TrafficRule} body One or more updated attributes that are allowed to be changed
     * @param {String} appInstanceId Represents a MEC application instance. Note that the appInstanceId is allocated by the MEC platform manager.
     * @param {String} trafficRuleId Represents a traffic rule.
     * @param {module:api/UnsupportedApi~applicationsTrafficRulePUTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TrafficRule}
     */
    this.applicationsTrafficRulePUT = function(body, appInstanceId, trafficRuleId, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling applicationsTrafficRulePUT");
      }

      // verify the required parameter 'appInstanceId' is set
      if (appInstanceId === undefined || appInstanceId === null) {
        throw new Error("Missing the required parameter 'appInstanceId' when calling applicationsTrafficRulePUT");
      }

      // verify the required parameter 'trafficRuleId' is set
      if (trafficRuleId === undefined || trafficRuleId === null) {
        throw new Error("Missing the required parameter 'trafficRuleId' when calling applicationsTrafficRulePUT");
      }


      var pathParams = {
        'appInstanceId': appInstanceId,
        'trafficRuleId': trafficRuleId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/problem+json'];
      var returnType = TrafficRule;

      return this.apiClient.callApi(
        '/applications/{appInstanceId}/traffic_rules/{trafficRuleId}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the applicationsTrafficRulesGET operation.
     * @callback module:api/UnsupportedApi~applicationsTrafficRulesGETCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TrafficRule>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method retrieves information about all the traffic rules associated with a MEC application instance.
     * @param {String} appInstanceId Represents a MEC application instance. Note that the appInstanceId is allocated by the MEC platform manager.
     * @param {module:api/UnsupportedApi~applicationsTrafficRulesGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TrafficRule>}
     */
    this.applicationsTrafficRulesGET = function(appInstanceId, callback) {
      var postBody = null;

      // verify the required parameter 'appInstanceId' is set
      if (appInstanceId === undefined || appInstanceId === null) {
        throw new Error("Missing the required parameter 'appInstanceId' when calling applicationsTrafficRulesGET");
      }


      var pathParams = {
        'appInstanceId': appInstanceId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'application/problem+json'];
      var returnType = [TrafficRule];

      return this.apiClient.callApi(
        '/applications/{appInstanceId}/traffic_rules', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
